
CAN_US_without_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c88  08003c88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c88  08003c88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003c9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003c9c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a694  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa6  00000000  00000000  0002a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c32  00000000  00000000  0002d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfec  00000000  00000000  0004617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f146  00000000  00000000  00052166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e12ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  000e1300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c00 	.word	0x08003c00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c00 	.word	0x08003c00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 ff3e 	bl	80010a8 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fb71 	bl	8000918 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f9a3 	bl	8000588 <__aeabi_fsub>
 8000242:	f000 fb69 	bl	8000918 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	4646      	mov	r6, r8
 8000254:	46d6      	mov	lr, sl
 8000256:	464f      	mov	r7, r9
 8000258:	024d      	lsls	r5, r1, #9
 800025a:	0242      	lsls	r2, r0, #9
 800025c:	b5c0      	push	{r6, r7, lr}
 800025e:	0a52      	lsrs	r2, r2, #9
 8000260:	0a6e      	lsrs	r6, r5, #9
 8000262:	0047      	lsls	r7, r0, #1
 8000264:	46b0      	mov	r8, r6
 8000266:	0e3f      	lsrs	r7, r7, #24
 8000268:	004e      	lsls	r6, r1, #1
 800026a:	0fc4      	lsrs	r4, r0, #31
 800026c:	00d0      	lsls	r0, r2, #3
 800026e:	4694      	mov	ip, r2
 8000270:	003b      	movs	r3, r7
 8000272:	4682      	mov	sl, r0
 8000274:	0e36      	lsrs	r6, r6, #24
 8000276:	0fc9      	lsrs	r1, r1, #31
 8000278:	09ad      	lsrs	r5, r5, #6
 800027a:	428c      	cmp	r4, r1
 800027c:	d06d      	beq.n	800035a <__aeabi_fadd+0x10a>
 800027e:	1bb8      	subs	r0, r7, r6
 8000280:	4681      	mov	r9, r0
 8000282:	2800      	cmp	r0, #0
 8000284:	dd4d      	ble.n	8000322 <__aeabi_fadd+0xd2>
 8000286:	2e00      	cmp	r6, #0
 8000288:	d100      	bne.n	800028c <__aeabi_fadd+0x3c>
 800028a:	e088      	b.n	800039e <__aeabi_fadd+0x14e>
 800028c:	2fff      	cmp	r7, #255	; 0xff
 800028e:	d05a      	beq.n	8000346 <__aeabi_fadd+0xf6>
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	04db      	lsls	r3, r3, #19
 8000294:	431d      	orrs	r5, r3
 8000296:	464b      	mov	r3, r9
 8000298:	2201      	movs	r2, #1
 800029a:	2b1b      	cmp	r3, #27
 800029c:	dc0a      	bgt.n	80002b4 <__aeabi_fadd+0x64>
 800029e:	002b      	movs	r3, r5
 80002a0:	464a      	mov	r2, r9
 80002a2:	4649      	mov	r1, r9
 80002a4:	40d3      	lsrs	r3, r2
 80002a6:	2220      	movs	r2, #32
 80002a8:	1a52      	subs	r2, r2, r1
 80002aa:	4095      	lsls	r5, r2
 80002ac:	002a      	movs	r2, r5
 80002ae:	1e55      	subs	r5, r2, #1
 80002b0:	41aa      	sbcs	r2, r5
 80002b2:	431a      	orrs	r2, r3
 80002b4:	4653      	mov	r3, sl
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	0153      	lsls	r3, r2, #5
 80002ba:	d400      	bmi.n	80002be <__aeabi_fadd+0x6e>
 80002bc:	e0b9      	b.n	8000432 <__aeabi_fadd+0x1e2>
 80002be:	0192      	lsls	r2, r2, #6
 80002c0:	0996      	lsrs	r6, r2, #6
 80002c2:	0030      	movs	r0, r6
 80002c4:	f000 fefa 	bl	80010bc <__clzsi2>
 80002c8:	3805      	subs	r0, #5
 80002ca:	4086      	lsls	r6, r0
 80002cc:	4287      	cmp	r7, r0
 80002ce:	dd00      	ble.n	80002d2 <__aeabi_fadd+0x82>
 80002d0:	e0d4      	b.n	800047c <__aeabi_fadd+0x22c>
 80002d2:	0033      	movs	r3, r6
 80002d4:	1bc7      	subs	r7, r0, r7
 80002d6:	2020      	movs	r0, #32
 80002d8:	3701      	adds	r7, #1
 80002da:	40fb      	lsrs	r3, r7
 80002dc:	1bc7      	subs	r7, r0, r7
 80002de:	40be      	lsls	r6, r7
 80002e0:	0032      	movs	r2, r6
 80002e2:	1e56      	subs	r6, r2, #1
 80002e4:	41b2      	sbcs	r2, r6
 80002e6:	2700      	movs	r7, #0
 80002e8:	431a      	orrs	r2, r3
 80002ea:	0753      	lsls	r3, r2, #29
 80002ec:	d004      	beq.n	80002f8 <__aeabi_fadd+0xa8>
 80002ee:	230f      	movs	r3, #15
 80002f0:	4013      	ands	r3, r2
 80002f2:	2b04      	cmp	r3, #4
 80002f4:	d000      	beq.n	80002f8 <__aeabi_fadd+0xa8>
 80002f6:	3204      	adds	r2, #4
 80002f8:	0153      	lsls	r3, r2, #5
 80002fa:	d400      	bmi.n	80002fe <__aeabi_fadd+0xae>
 80002fc:	e09c      	b.n	8000438 <__aeabi_fadd+0x1e8>
 80002fe:	1c7b      	adds	r3, r7, #1
 8000300:	2ffe      	cmp	r7, #254	; 0xfe
 8000302:	d100      	bne.n	8000306 <__aeabi_fadd+0xb6>
 8000304:	e09a      	b.n	800043c <__aeabi_fadd+0x1ec>
 8000306:	0192      	lsls	r2, r2, #6
 8000308:	0a52      	lsrs	r2, r2, #9
 800030a:	4694      	mov	ip, r2
 800030c:	b2db      	uxtb	r3, r3
 800030e:	05d8      	lsls	r0, r3, #23
 8000310:	4663      	mov	r3, ip
 8000312:	07e4      	lsls	r4, r4, #31
 8000314:	4318      	orrs	r0, r3
 8000316:	4320      	orrs	r0, r4
 8000318:	bce0      	pop	{r5, r6, r7}
 800031a:	46ba      	mov	sl, r7
 800031c:	46b1      	mov	r9, r6
 800031e:	46a8      	mov	r8, r5
 8000320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000322:	2800      	cmp	r0, #0
 8000324:	d049      	beq.n	80003ba <__aeabi_fadd+0x16a>
 8000326:	1bf3      	subs	r3, r6, r7
 8000328:	2f00      	cmp	r7, #0
 800032a:	d000      	beq.n	800032e <__aeabi_fadd+0xde>
 800032c:	e0b6      	b.n	800049c <__aeabi_fadd+0x24c>
 800032e:	4652      	mov	r2, sl
 8000330:	2a00      	cmp	r2, #0
 8000332:	d060      	beq.n	80003f6 <__aeabi_fadd+0x1a6>
 8000334:	3b01      	subs	r3, #1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d100      	bne.n	800033c <__aeabi_fadd+0xec>
 800033a:	e0fc      	b.n	8000536 <__aeabi_fadd+0x2e6>
 800033c:	2eff      	cmp	r6, #255	; 0xff
 800033e:	d000      	beq.n	8000342 <__aeabi_fadd+0xf2>
 8000340:	e0b4      	b.n	80004ac <__aeabi_fadd+0x25c>
 8000342:	000c      	movs	r4, r1
 8000344:	4642      	mov	r2, r8
 8000346:	2a00      	cmp	r2, #0
 8000348:	d078      	beq.n	800043c <__aeabi_fadd+0x1ec>
 800034a:	2080      	movs	r0, #128	; 0x80
 800034c:	03c0      	lsls	r0, r0, #15
 800034e:	4310      	orrs	r0, r2
 8000350:	0242      	lsls	r2, r0, #9
 8000352:	0a53      	lsrs	r3, r2, #9
 8000354:	469c      	mov	ip, r3
 8000356:	23ff      	movs	r3, #255	; 0xff
 8000358:	e7d9      	b.n	800030e <__aeabi_fadd+0xbe>
 800035a:	1bb9      	subs	r1, r7, r6
 800035c:	2900      	cmp	r1, #0
 800035e:	dd71      	ble.n	8000444 <__aeabi_fadd+0x1f4>
 8000360:	2e00      	cmp	r6, #0
 8000362:	d03f      	beq.n	80003e4 <__aeabi_fadd+0x194>
 8000364:	2fff      	cmp	r7, #255	; 0xff
 8000366:	d0ee      	beq.n	8000346 <__aeabi_fadd+0xf6>
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	04db      	lsls	r3, r3, #19
 800036c:	431d      	orrs	r5, r3
 800036e:	2201      	movs	r2, #1
 8000370:	291b      	cmp	r1, #27
 8000372:	dc07      	bgt.n	8000384 <__aeabi_fadd+0x134>
 8000374:	002a      	movs	r2, r5
 8000376:	2320      	movs	r3, #32
 8000378:	40ca      	lsrs	r2, r1
 800037a:	1a59      	subs	r1, r3, r1
 800037c:	408d      	lsls	r5, r1
 800037e:	1e6b      	subs	r3, r5, #1
 8000380:	419d      	sbcs	r5, r3
 8000382:	432a      	orrs	r2, r5
 8000384:	4452      	add	r2, sl
 8000386:	0153      	lsls	r3, r2, #5
 8000388:	d553      	bpl.n	8000432 <__aeabi_fadd+0x1e2>
 800038a:	3701      	adds	r7, #1
 800038c:	2fff      	cmp	r7, #255	; 0xff
 800038e:	d055      	beq.n	800043c <__aeabi_fadd+0x1ec>
 8000390:	2301      	movs	r3, #1
 8000392:	497b      	ldr	r1, [pc, #492]	; (8000580 <__aeabi_fadd+0x330>)
 8000394:	4013      	ands	r3, r2
 8000396:	0852      	lsrs	r2, r2, #1
 8000398:	400a      	ands	r2, r1
 800039a:	431a      	orrs	r2, r3
 800039c:	e7a5      	b.n	80002ea <__aeabi_fadd+0x9a>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d02c      	beq.n	80003fc <__aeabi_fadd+0x1ac>
 80003a2:	2301      	movs	r3, #1
 80003a4:	425b      	negs	r3, r3
 80003a6:	469c      	mov	ip, r3
 80003a8:	44e1      	add	r9, ip
 80003aa:	464b      	mov	r3, r9
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d100      	bne.n	80003b2 <__aeabi_fadd+0x162>
 80003b0:	e0ad      	b.n	800050e <__aeabi_fadd+0x2be>
 80003b2:	2fff      	cmp	r7, #255	; 0xff
 80003b4:	d000      	beq.n	80003b8 <__aeabi_fadd+0x168>
 80003b6:	e76e      	b.n	8000296 <__aeabi_fadd+0x46>
 80003b8:	e7c5      	b.n	8000346 <__aeabi_fadd+0xf6>
 80003ba:	20fe      	movs	r0, #254	; 0xfe
 80003bc:	1c7e      	adds	r6, r7, #1
 80003be:	4230      	tst	r0, r6
 80003c0:	d160      	bne.n	8000484 <__aeabi_fadd+0x234>
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d000      	beq.n	80003c8 <__aeabi_fadd+0x178>
 80003c6:	e093      	b.n	80004f0 <__aeabi_fadd+0x2a0>
 80003c8:	4652      	mov	r2, sl
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d100      	bne.n	80003d0 <__aeabi_fadd+0x180>
 80003ce:	e0b6      	b.n	800053e <__aeabi_fadd+0x2ee>
 80003d0:	2d00      	cmp	r5, #0
 80003d2:	d09c      	beq.n	800030e <__aeabi_fadd+0xbe>
 80003d4:	1b52      	subs	r2, r2, r5
 80003d6:	0150      	lsls	r0, r2, #5
 80003d8:	d400      	bmi.n	80003dc <__aeabi_fadd+0x18c>
 80003da:	e0c3      	b.n	8000564 <__aeabi_fadd+0x314>
 80003dc:	4653      	mov	r3, sl
 80003de:	000c      	movs	r4, r1
 80003e0:	1aea      	subs	r2, r5, r3
 80003e2:	e782      	b.n	80002ea <__aeabi_fadd+0x9a>
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d009      	beq.n	80003fc <__aeabi_fadd+0x1ac>
 80003e8:	3901      	subs	r1, #1
 80003ea:	2900      	cmp	r1, #0
 80003ec:	d100      	bne.n	80003f0 <__aeabi_fadd+0x1a0>
 80003ee:	e08b      	b.n	8000508 <__aeabi_fadd+0x2b8>
 80003f0:	2fff      	cmp	r7, #255	; 0xff
 80003f2:	d1bc      	bne.n	800036e <__aeabi_fadd+0x11e>
 80003f4:	e7a7      	b.n	8000346 <__aeabi_fadd+0xf6>
 80003f6:	000c      	movs	r4, r1
 80003f8:	4642      	mov	r2, r8
 80003fa:	0037      	movs	r7, r6
 80003fc:	2fff      	cmp	r7, #255	; 0xff
 80003fe:	d0a2      	beq.n	8000346 <__aeabi_fadd+0xf6>
 8000400:	0252      	lsls	r2, r2, #9
 8000402:	0a53      	lsrs	r3, r2, #9
 8000404:	469c      	mov	ip, r3
 8000406:	b2fb      	uxtb	r3, r7
 8000408:	e781      	b.n	800030e <__aeabi_fadd+0xbe>
 800040a:	21fe      	movs	r1, #254	; 0xfe
 800040c:	3701      	adds	r7, #1
 800040e:	4239      	tst	r1, r7
 8000410:	d165      	bne.n	80004de <__aeabi_fadd+0x28e>
 8000412:	2b00      	cmp	r3, #0
 8000414:	d17e      	bne.n	8000514 <__aeabi_fadd+0x2c4>
 8000416:	2800      	cmp	r0, #0
 8000418:	d100      	bne.n	800041c <__aeabi_fadd+0x1cc>
 800041a:	e0aa      	b.n	8000572 <__aeabi_fadd+0x322>
 800041c:	2d00      	cmp	r5, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_fadd+0x1d2>
 8000420:	e775      	b.n	800030e <__aeabi_fadd+0xbe>
 8000422:	002a      	movs	r2, r5
 8000424:	4452      	add	r2, sl
 8000426:	2700      	movs	r7, #0
 8000428:	0153      	lsls	r3, r2, #5
 800042a:	d502      	bpl.n	8000432 <__aeabi_fadd+0x1e2>
 800042c:	4b55      	ldr	r3, [pc, #340]	; (8000584 <__aeabi_fadd+0x334>)
 800042e:	3701      	adds	r7, #1
 8000430:	401a      	ands	r2, r3
 8000432:	0753      	lsls	r3, r2, #29
 8000434:	d000      	beq.n	8000438 <__aeabi_fadd+0x1e8>
 8000436:	e75a      	b.n	80002ee <__aeabi_fadd+0x9e>
 8000438:	08d2      	lsrs	r2, r2, #3
 800043a:	e7df      	b.n	80003fc <__aeabi_fadd+0x1ac>
 800043c:	2200      	movs	r2, #0
 800043e:	23ff      	movs	r3, #255	; 0xff
 8000440:	4694      	mov	ip, r2
 8000442:	e764      	b.n	800030e <__aeabi_fadd+0xbe>
 8000444:	2900      	cmp	r1, #0
 8000446:	d0e0      	beq.n	800040a <__aeabi_fadd+0x1ba>
 8000448:	1bf3      	subs	r3, r6, r7
 800044a:	2f00      	cmp	r7, #0
 800044c:	d03e      	beq.n	80004cc <__aeabi_fadd+0x27c>
 800044e:	2eff      	cmp	r6, #255	; 0xff
 8000450:	d100      	bne.n	8000454 <__aeabi_fadd+0x204>
 8000452:	e777      	b.n	8000344 <__aeabi_fadd+0xf4>
 8000454:	2280      	movs	r2, #128	; 0x80
 8000456:	0001      	movs	r1, r0
 8000458:	04d2      	lsls	r2, r2, #19
 800045a:	4311      	orrs	r1, r2
 800045c:	468a      	mov	sl, r1
 800045e:	2201      	movs	r2, #1
 8000460:	2b1b      	cmp	r3, #27
 8000462:	dc08      	bgt.n	8000476 <__aeabi_fadd+0x226>
 8000464:	4652      	mov	r2, sl
 8000466:	2120      	movs	r1, #32
 8000468:	4650      	mov	r0, sl
 800046a:	40da      	lsrs	r2, r3
 800046c:	1acb      	subs	r3, r1, r3
 800046e:	4098      	lsls	r0, r3
 8000470:	1e43      	subs	r3, r0, #1
 8000472:	4198      	sbcs	r0, r3
 8000474:	4302      	orrs	r2, r0
 8000476:	0037      	movs	r7, r6
 8000478:	1952      	adds	r2, r2, r5
 800047a:	e784      	b.n	8000386 <__aeabi_fadd+0x136>
 800047c:	4a41      	ldr	r2, [pc, #260]	; (8000584 <__aeabi_fadd+0x334>)
 800047e:	1a3f      	subs	r7, r7, r0
 8000480:	4032      	ands	r2, r6
 8000482:	e732      	b.n	80002ea <__aeabi_fadd+0x9a>
 8000484:	4653      	mov	r3, sl
 8000486:	1b5e      	subs	r6, r3, r5
 8000488:	0173      	lsls	r3, r6, #5
 800048a:	d42d      	bmi.n	80004e8 <__aeabi_fadd+0x298>
 800048c:	2e00      	cmp	r6, #0
 800048e:	d000      	beq.n	8000492 <__aeabi_fadd+0x242>
 8000490:	e717      	b.n	80002c2 <__aeabi_fadd+0x72>
 8000492:	2200      	movs	r2, #0
 8000494:	2400      	movs	r4, #0
 8000496:	2300      	movs	r3, #0
 8000498:	4694      	mov	ip, r2
 800049a:	e738      	b.n	800030e <__aeabi_fadd+0xbe>
 800049c:	2eff      	cmp	r6, #255	; 0xff
 800049e:	d100      	bne.n	80004a2 <__aeabi_fadd+0x252>
 80004a0:	e74f      	b.n	8000342 <__aeabi_fadd+0xf2>
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	4650      	mov	r0, sl
 80004a6:	04d2      	lsls	r2, r2, #19
 80004a8:	4310      	orrs	r0, r2
 80004aa:	4682      	mov	sl, r0
 80004ac:	2201      	movs	r2, #1
 80004ae:	2b1b      	cmp	r3, #27
 80004b0:	dc08      	bgt.n	80004c4 <__aeabi_fadd+0x274>
 80004b2:	4652      	mov	r2, sl
 80004b4:	2420      	movs	r4, #32
 80004b6:	4650      	mov	r0, sl
 80004b8:	40da      	lsrs	r2, r3
 80004ba:	1ae3      	subs	r3, r4, r3
 80004bc:	4098      	lsls	r0, r3
 80004be:	1e43      	subs	r3, r0, #1
 80004c0:	4198      	sbcs	r0, r3
 80004c2:	4302      	orrs	r2, r0
 80004c4:	000c      	movs	r4, r1
 80004c6:	0037      	movs	r7, r6
 80004c8:	1aaa      	subs	r2, r5, r2
 80004ca:	e6f5      	b.n	80002b8 <__aeabi_fadd+0x68>
 80004cc:	2800      	cmp	r0, #0
 80004ce:	d093      	beq.n	80003f8 <__aeabi_fadd+0x1a8>
 80004d0:	3b01      	subs	r3, #1
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d04f      	beq.n	8000576 <__aeabi_fadd+0x326>
 80004d6:	2eff      	cmp	r6, #255	; 0xff
 80004d8:	d1c1      	bne.n	800045e <__aeabi_fadd+0x20e>
 80004da:	4642      	mov	r2, r8
 80004dc:	e733      	b.n	8000346 <__aeabi_fadd+0xf6>
 80004de:	2fff      	cmp	r7, #255	; 0xff
 80004e0:	d0ac      	beq.n	800043c <__aeabi_fadd+0x1ec>
 80004e2:	4455      	add	r5, sl
 80004e4:	086a      	lsrs	r2, r5, #1
 80004e6:	e7a4      	b.n	8000432 <__aeabi_fadd+0x1e2>
 80004e8:	4653      	mov	r3, sl
 80004ea:	000c      	movs	r4, r1
 80004ec:	1aee      	subs	r6, r5, r3
 80004ee:	e6e8      	b.n	80002c2 <__aeabi_fadd+0x72>
 80004f0:	4653      	mov	r3, sl
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d128      	bne.n	8000548 <__aeabi_fadd+0x2f8>
 80004f6:	2d00      	cmp	r5, #0
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x2ac>
 80004fa:	e722      	b.n	8000342 <__aeabi_fadd+0xf2>
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	03db      	lsls	r3, r3, #15
 8000500:	469c      	mov	ip, r3
 8000502:	2400      	movs	r4, #0
 8000504:	23ff      	movs	r3, #255	; 0xff
 8000506:	e702      	b.n	800030e <__aeabi_fadd+0xbe>
 8000508:	002a      	movs	r2, r5
 800050a:	4452      	add	r2, sl
 800050c:	e73b      	b.n	8000386 <__aeabi_fadd+0x136>
 800050e:	4653      	mov	r3, sl
 8000510:	1b5a      	subs	r2, r3, r5
 8000512:	e6d1      	b.n	80002b8 <__aeabi_fadd+0x68>
 8000514:	2800      	cmp	r0, #0
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x2ca>
 8000518:	e714      	b.n	8000344 <__aeabi_fadd+0xf4>
 800051a:	2d00      	cmp	r5, #0
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x2d0>
 800051e:	e712      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	03db      	lsls	r3, r3, #15
 8000524:	421a      	tst	r2, r3
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x2da>
 8000528:	e70d      	b.n	8000346 <__aeabi_fadd+0xf6>
 800052a:	4641      	mov	r1, r8
 800052c:	4219      	tst	r1, r3
 800052e:	d000      	beq.n	8000532 <__aeabi_fadd+0x2e2>
 8000530:	e709      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000532:	4642      	mov	r2, r8
 8000534:	e707      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000536:	000c      	movs	r4, r1
 8000538:	0037      	movs	r7, r6
 800053a:	1aaa      	subs	r2, r5, r2
 800053c:	e6bc      	b.n	80002b8 <__aeabi_fadd+0x68>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d013      	beq.n	800056a <__aeabi_fadd+0x31a>
 8000542:	000c      	movs	r4, r1
 8000544:	46c4      	mov	ip, r8
 8000546:	e6e2      	b.n	800030e <__aeabi_fadd+0xbe>
 8000548:	2d00      	cmp	r5, #0
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0x2fe>
 800054c:	e6fb      	b.n	8000346 <__aeabi_fadd+0xf6>
 800054e:	2380      	movs	r3, #128	; 0x80
 8000550:	03db      	lsls	r3, r3, #15
 8000552:	421a      	tst	r2, r3
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x308>
 8000556:	e6f6      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000558:	4640      	mov	r0, r8
 800055a:	4218      	tst	r0, r3
 800055c:	d000      	beq.n	8000560 <__aeabi_fadd+0x310>
 800055e:	e6f2      	b.n	8000346 <__aeabi_fadd+0xf6>
 8000560:	000c      	movs	r4, r1
 8000562:	e6ef      	b.n	8000344 <__aeabi_fadd+0xf4>
 8000564:	2a00      	cmp	r2, #0
 8000566:	d000      	beq.n	800056a <__aeabi_fadd+0x31a>
 8000568:	e763      	b.n	8000432 <__aeabi_fadd+0x1e2>
 800056a:	2200      	movs	r2, #0
 800056c:	2400      	movs	r4, #0
 800056e:	4694      	mov	ip, r2
 8000570:	e6cd      	b.n	800030e <__aeabi_fadd+0xbe>
 8000572:	46c4      	mov	ip, r8
 8000574:	e6cb      	b.n	800030e <__aeabi_fadd+0xbe>
 8000576:	002a      	movs	r2, r5
 8000578:	0037      	movs	r7, r6
 800057a:	4452      	add	r2, sl
 800057c:	e703      	b.n	8000386 <__aeabi_fadd+0x136>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	7dffffff 	.word	0x7dffffff
 8000584:	fbffffff 	.word	0xfbffffff

08000588 <__aeabi_fsub>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	4646      	mov	r6, r8
 800058c:	46d6      	mov	lr, sl
 800058e:	464f      	mov	r7, r9
 8000590:	0243      	lsls	r3, r0, #9
 8000592:	0a5b      	lsrs	r3, r3, #9
 8000594:	00da      	lsls	r2, r3, #3
 8000596:	4694      	mov	ip, r2
 8000598:	024a      	lsls	r2, r1, #9
 800059a:	b5c0      	push	{r6, r7, lr}
 800059c:	0044      	lsls	r4, r0, #1
 800059e:	0a56      	lsrs	r6, r2, #9
 80005a0:	1c05      	adds	r5, r0, #0
 80005a2:	46b0      	mov	r8, r6
 80005a4:	0e24      	lsrs	r4, r4, #24
 80005a6:	004e      	lsls	r6, r1, #1
 80005a8:	0992      	lsrs	r2, r2, #6
 80005aa:	001f      	movs	r7, r3
 80005ac:	0020      	movs	r0, r4
 80005ae:	4692      	mov	sl, r2
 80005b0:	0fed      	lsrs	r5, r5, #31
 80005b2:	0e36      	lsrs	r6, r6, #24
 80005b4:	0fc9      	lsrs	r1, r1, #31
 80005b6:	2eff      	cmp	r6, #255	; 0xff
 80005b8:	d100      	bne.n	80005bc <__aeabi_fsub+0x34>
 80005ba:	e07f      	b.n	80006bc <__aeabi_fsub+0x134>
 80005bc:	2201      	movs	r2, #1
 80005be:	4051      	eors	r1, r2
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d051      	beq.n	8000668 <__aeabi_fsub+0xe0>
 80005c4:	1ba2      	subs	r2, r4, r6
 80005c6:	4691      	mov	r9, r2
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_fsub+0x46>
 80005cc:	e07e      	b.n	80006cc <__aeabi_fsub+0x144>
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fsub+0x4c>
 80005d2:	e099      	b.n	8000708 <__aeabi_fsub+0x180>
 80005d4:	2cff      	cmp	r4, #255	; 0xff
 80005d6:	d100      	bne.n	80005da <__aeabi_fsub+0x52>
 80005d8:	e08c      	b.n	80006f4 <__aeabi_fsub+0x16c>
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	4652      	mov	r2, sl
 80005de:	04db      	lsls	r3, r3, #19
 80005e0:	431a      	orrs	r2, r3
 80005e2:	4692      	mov	sl, r2
 80005e4:	464a      	mov	r2, r9
 80005e6:	2301      	movs	r3, #1
 80005e8:	2a1b      	cmp	r2, #27
 80005ea:	dc08      	bgt.n	80005fe <__aeabi_fsub+0x76>
 80005ec:	4653      	mov	r3, sl
 80005ee:	2120      	movs	r1, #32
 80005f0:	40d3      	lsrs	r3, r2
 80005f2:	1a89      	subs	r1, r1, r2
 80005f4:	4652      	mov	r2, sl
 80005f6:	408a      	lsls	r2, r1
 80005f8:	1e51      	subs	r1, r2, #1
 80005fa:	418a      	sbcs	r2, r1
 80005fc:	4313      	orrs	r3, r2
 80005fe:	4662      	mov	r2, ip
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	015a      	lsls	r2, r3, #5
 8000604:	d400      	bmi.n	8000608 <__aeabi_fsub+0x80>
 8000606:	e0f3      	b.n	80007f0 <__aeabi_fsub+0x268>
 8000608:	019b      	lsls	r3, r3, #6
 800060a:	099e      	lsrs	r6, r3, #6
 800060c:	0030      	movs	r0, r6
 800060e:	f000 fd55 	bl	80010bc <__clzsi2>
 8000612:	3805      	subs	r0, #5
 8000614:	4086      	lsls	r6, r0
 8000616:	4284      	cmp	r4, r0
 8000618:	dd00      	ble.n	800061c <__aeabi_fsub+0x94>
 800061a:	e0f7      	b.n	800080c <__aeabi_fsub+0x284>
 800061c:	0032      	movs	r2, r6
 800061e:	1b04      	subs	r4, r0, r4
 8000620:	2020      	movs	r0, #32
 8000622:	3401      	adds	r4, #1
 8000624:	40e2      	lsrs	r2, r4
 8000626:	1b04      	subs	r4, r0, r4
 8000628:	40a6      	lsls	r6, r4
 800062a:	0033      	movs	r3, r6
 800062c:	1e5e      	subs	r6, r3, #1
 800062e:	41b3      	sbcs	r3, r6
 8000630:	2400      	movs	r4, #0
 8000632:	4313      	orrs	r3, r2
 8000634:	075a      	lsls	r2, r3, #29
 8000636:	d004      	beq.n	8000642 <__aeabi_fsub+0xba>
 8000638:	220f      	movs	r2, #15
 800063a:	401a      	ands	r2, r3
 800063c:	2a04      	cmp	r2, #4
 800063e:	d000      	beq.n	8000642 <__aeabi_fsub+0xba>
 8000640:	3304      	adds	r3, #4
 8000642:	015a      	lsls	r2, r3, #5
 8000644:	d400      	bmi.n	8000648 <__aeabi_fsub+0xc0>
 8000646:	e0d6      	b.n	80007f6 <__aeabi_fsub+0x26e>
 8000648:	1c62      	adds	r2, r4, #1
 800064a:	2cfe      	cmp	r4, #254	; 0xfe
 800064c:	d100      	bne.n	8000650 <__aeabi_fsub+0xc8>
 800064e:	e0da      	b.n	8000806 <__aeabi_fsub+0x27e>
 8000650:	019b      	lsls	r3, r3, #6
 8000652:	0a5f      	lsrs	r7, r3, #9
 8000654:	b2d0      	uxtb	r0, r2
 8000656:	05c0      	lsls	r0, r0, #23
 8000658:	4338      	orrs	r0, r7
 800065a:	07ed      	lsls	r5, r5, #31
 800065c:	4328      	orrs	r0, r5
 800065e:	bce0      	pop	{r5, r6, r7}
 8000660:	46ba      	mov	sl, r7
 8000662:	46b1      	mov	r9, r6
 8000664:	46a8      	mov	r8, r5
 8000666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000668:	1ba2      	subs	r2, r4, r6
 800066a:	4691      	mov	r9, r2
 800066c:	2a00      	cmp	r2, #0
 800066e:	dd63      	ble.n	8000738 <__aeabi_fsub+0x1b0>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fsub+0xee>
 8000674:	e099      	b.n	80007aa <__aeabi_fsub+0x222>
 8000676:	2cff      	cmp	r4, #255	; 0xff
 8000678:	d03c      	beq.n	80006f4 <__aeabi_fsub+0x16c>
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	4652      	mov	r2, sl
 800067e:	04db      	lsls	r3, r3, #19
 8000680:	431a      	orrs	r2, r3
 8000682:	4692      	mov	sl, r2
 8000684:	464a      	mov	r2, r9
 8000686:	2301      	movs	r3, #1
 8000688:	2a1b      	cmp	r2, #27
 800068a:	dc08      	bgt.n	800069e <__aeabi_fsub+0x116>
 800068c:	4653      	mov	r3, sl
 800068e:	2120      	movs	r1, #32
 8000690:	40d3      	lsrs	r3, r2
 8000692:	1a89      	subs	r1, r1, r2
 8000694:	4652      	mov	r2, sl
 8000696:	408a      	lsls	r2, r1
 8000698:	1e51      	subs	r1, r2, #1
 800069a:	418a      	sbcs	r2, r1
 800069c:	4313      	orrs	r3, r2
 800069e:	4463      	add	r3, ip
 80006a0:	015a      	lsls	r2, r3, #5
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_fsub+0x11e>
 80006a4:	e0a4      	b.n	80007f0 <__aeabi_fsub+0x268>
 80006a6:	3401      	adds	r4, #1
 80006a8:	2cff      	cmp	r4, #255	; 0xff
 80006aa:	d100      	bne.n	80006ae <__aeabi_fsub+0x126>
 80006ac:	e0ab      	b.n	8000806 <__aeabi_fsub+0x27e>
 80006ae:	2201      	movs	r2, #1
 80006b0:	4997      	ldr	r1, [pc, #604]	; (8000910 <__aeabi_fsub+0x388>)
 80006b2:	401a      	ands	r2, r3
 80006b4:	085b      	lsrs	r3, r3, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	4313      	orrs	r3, r2
 80006ba:	e7bb      	b.n	8000634 <__aeabi_fsub+0xac>
 80006bc:	2a00      	cmp	r2, #0
 80006be:	d032      	beq.n	8000726 <__aeabi_fsub+0x19e>
 80006c0:	428d      	cmp	r5, r1
 80006c2:	d035      	beq.n	8000730 <__aeabi_fsub+0x1a8>
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	4252      	negs	r2, r2
 80006c8:	4691      	mov	r9, r2
 80006ca:	44a1      	add	r9, r4
 80006cc:	464a      	mov	r2, r9
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	d051      	beq.n	8000776 <__aeabi_fsub+0x1ee>
 80006d2:	1b30      	subs	r0, r6, r4
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	d000      	beq.n	80006da <__aeabi_fsub+0x152>
 80006d8:	e09c      	b.n	8000814 <__aeabi_fsub+0x28c>
 80006da:	4663      	mov	r3, ip
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_fsub+0x15a>
 80006e0:	e0df      	b.n	80008a2 <__aeabi_fsub+0x31a>
 80006e2:	3801      	subs	r0, #1
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_fsub+0x162>
 80006e8:	e0f7      	b.n	80008da <__aeabi_fsub+0x352>
 80006ea:	2eff      	cmp	r6, #255	; 0xff
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fsub+0x168>
 80006ee:	e099      	b.n	8000824 <__aeabi_fsub+0x29c>
 80006f0:	000d      	movs	r5, r1
 80006f2:	4643      	mov	r3, r8
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_fsub+0x172>
 80006f8:	e085      	b.n	8000806 <__aeabi_fsub+0x27e>
 80006fa:	2780      	movs	r7, #128	; 0x80
 80006fc:	03ff      	lsls	r7, r7, #15
 80006fe:	431f      	orrs	r7, r3
 8000700:	027f      	lsls	r7, r7, #9
 8000702:	20ff      	movs	r0, #255	; 0xff
 8000704:	0a7f      	lsrs	r7, r7, #9
 8000706:	e7a6      	b.n	8000656 <__aeabi_fsub+0xce>
 8000708:	4652      	mov	r2, sl
 800070a:	2a00      	cmp	r2, #0
 800070c:	d074      	beq.n	80007f8 <__aeabi_fsub+0x270>
 800070e:	2201      	movs	r2, #1
 8000710:	4252      	negs	r2, r2
 8000712:	4690      	mov	r8, r2
 8000714:	44c1      	add	r9, r8
 8000716:	464a      	mov	r2, r9
 8000718:	2a00      	cmp	r2, #0
 800071a:	d100      	bne.n	800071e <__aeabi_fsub+0x196>
 800071c:	e0c8      	b.n	80008b0 <__aeabi_fsub+0x328>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d000      	beq.n	8000724 <__aeabi_fsub+0x19c>
 8000722:	e75f      	b.n	80005e4 <__aeabi_fsub+0x5c>
 8000724:	e7e6      	b.n	80006f4 <__aeabi_fsub+0x16c>
 8000726:	2201      	movs	r2, #1
 8000728:	4051      	eors	r1, r2
 800072a:	42a9      	cmp	r1, r5
 800072c:	d000      	beq.n	8000730 <__aeabi_fsub+0x1a8>
 800072e:	e749      	b.n	80005c4 <__aeabi_fsub+0x3c>
 8000730:	22ff      	movs	r2, #255	; 0xff
 8000732:	4252      	negs	r2, r2
 8000734:	4691      	mov	r9, r2
 8000736:	44a1      	add	r9, r4
 8000738:	464a      	mov	r2, r9
 800073a:	2a00      	cmp	r2, #0
 800073c:	d043      	beq.n	80007c6 <__aeabi_fsub+0x23e>
 800073e:	1b31      	subs	r1, r6, r4
 8000740:	2c00      	cmp	r4, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fsub+0x1be>
 8000744:	e08c      	b.n	8000860 <__aeabi_fsub+0x2d8>
 8000746:	2eff      	cmp	r6, #255	; 0xff
 8000748:	d100      	bne.n	800074c <__aeabi_fsub+0x1c4>
 800074a:	e092      	b.n	8000872 <__aeabi_fsub+0x2ea>
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	4662      	mov	r2, ip
 8000750:	04db      	lsls	r3, r3, #19
 8000752:	431a      	orrs	r2, r3
 8000754:	4694      	mov	ip, r2
 8000756:	2301      	movs	r3, #1
 8000758:	291b      	cmp	r1, #27
 800075a:	dc09      	bgt.n	8000770 <__aeabi_fsub+0x1e8>
 800075c:	2020      	movs	r0, #32
 800075e:	4663      	mov	r3, ip
 8000760:	4662      	mov	r2, ip
 8000762:	40cb      	lsrs	r3, r1
 8000764:	1a41      	subs	r1, r0, r1
 8000766:	408a      	lsls	r2, r1
 8000768:	0011      	movs	r1, r2
 800076a:	1e48      	subs	r0, r1, #1
 800076c:	4181      	sbcs	r1, r0
 800076e:	430b      	orrs	r3, r1
 8000770:	0034      	movs	r4, r6
 8000772:	4453      	add	r3, sl
 8000774:	e794      	b.n	80006a0 <__aeabi_fsub+0x118>
 8000776:	22fe      	movs	r2, #254	; 0xfe
 8000778:	1c66      	adds	r6, r4, #1
 800077a:	4232      	tst	r2, r6
 800077c:	d164      	bne.n	8000848 <__aeabi_fsub+0x2c0>
 800077e:	2c00      	cmp	r4, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_fsub+0x1fc>
 8000782:	e082      	b.n	800088a <__aeabi_fsub+0x302>
 8000784:	4663      	mov	r3, ip
 8000786:	2b00      	cmp	r3, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fsub+0x204>
 800078a:	e0ab      	b.n	80008e4 <__aeabi_fsub+0x35c>
 800078c:	4653      	mov	r3, sl
 800078e:	2b00      	cmp	r3, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fsub+0x20c>
 8000792:	e760      	b.n	8000656 <__aeabi_fsub+0xce>
 8000794:	4663      	mov	r3, ip
 8000796:	4652      	mov	r2, sl
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	015a      	lsls	r2, r3, #5
 800079c:	d400      	bmi.n	80007a0 <__aeabi_fsub+0x218>
 800079e:	e0aa      	b.n	80008f6 <__aeabi_fsub+0x36e>
 80007a0:	4663      	mov	r3, ip
 80007a2:	4652      	mov	r2, sl
 80007a4:	000d      	movs	r5, r1
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	e744      	b.n	8000634 <__aeabi_fsub+0xac>
 80007aa:	4652      	mov	r2, sl
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d023      	beq.n	80007f8 <__aeabi_fsub+0x270>
 80007b0:	2201      	movs	r2, #1
 80007b2:	4252      	negs	r2, r2
 80007b4:	4690      	mov	r8, r2
 80007b6:	44c1      	add	r9, r8
 80007b8:	464a      	mov	r2, r9
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	d075      	beq.n	80008aa <__aeabi_fsub+0x322>
 80007be:	2cff      	cmp	r4, #255	; 0xff
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fsub+0x23c>
 80007c2:	e75f      	b.n	8000684 <__aeabi_fsub+0xfc>
 80007c4:	e796      	b.n	80006f4 <__aeabi_fsub+0x16c>
 80007c6:	26fe      	movs	r6, #254	; 0xfe
 80007c8:	3401      	adds	r4, #1
 80007ca:	4226      	tst	r6, r4
 80007cc:	d153      	bne.n	8000876 <__aeabi_fsub+0x2ee>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d172      	bne.n	80008b8 <__aeabi_fsub+0x330>
 80007d2:	4663      	mov	r3, ip
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_fsub+0x252>
 80007d8:	e093      	b.n	8000902 <__aeabi_fsub+0x37a>
 80007da:	4653      	mov	r3, sl
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fsub+0x25a>
 80007e0:	e739      	b.n	8000656 <__aeabi_fsub+0xce>
 80007e2:	4463      	add	r3, ip
 80007e4:	2400      	movs	r4, #0
 80007e6:	015a      	lsls	r2, r3, #5
 80007e8:	d502      	bpl.n	80007f0 <__aeabi_fsub+0x268>
 80007ea:	4a4a      	ldr	r2, [pc, #296]	; (8000914 <__aeabi_fsub+0x38c>)
 80007ec:	3401      	adds	r4, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	075a      	lsls	r2, r3, #29
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fsub+0x26e>
 80007f4:	e720      	b.n	8000638 <__aeabi_fsub+0xb0>
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	2cff      	cmp	r4, #255	; 0xff
 80007fa:	d100      	bne.n	80007fe <__aeabi_fsub+0x276>
 80007fc:	e77a      	b.n	80006f4 <__aeabi_fsub+0x16c>
 80007fe:	025b      	lsls	r3, r3, #9
 8000800:	0a5f      	lsrs	r7, r3, #9
 8000802:	b2e0      	uxtb	r0, r4
 8000804:	e727      	b.n	8000656 <__aeabi_fsub+0xce>
 8000806:	20ff      	movs	r0, #255	; 0xff
 8000808:	2700      	movs	r7, #0
 800080a:	e724      	b.n	8000656 <__aeabi_fsub+0xce>
 800080c:	4b41      	ldr	r3, [pc, #260]	; (8000914 <__aeabi_fsub+0x38c>)
 800080e:	1a24      	subs	r4, r4, r0
 8000810:	4033      	ands	r3, r6
 8000812:	e70f      	b.n	8000634 <__aeabi_fsub+0xac>
 8000814:	2eff      	cmp	r6, #255	; 0xff
 8000816:	d100      	bne.n	800081a <__aeabi_fsub+0x292>
 8000818:	e76a      	b.n	80006f0 <__aeabi_fsub+0x168>
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	4662      	mov	r2, ip
 800081e:	04db      	lsls	r3, r3, #19
 8000820:	431a      	orrs	r2, r3
 8000822:	4694      	mov	ip, r2
 8000824:	2301      	movs	r3, #1
 8000826:	281b      	cmp	r0, #27
 8000828:	dc09      	bgt.n	800083e <__aeabi_fsub+0x2b6>
 800082a:	2420      	movs	r4, #32
 800082c:	4663      	mov	r3, ip
 800082e:	4662      	mov	r2, ip
 8000830:	40c3      	lsrs	r3, r0
 8000832:	1a20      	subs	r0, r4, r0
 8000834:	4082      	lsls	r2, r0
 8000836:	0010      	movs	r0, r2
 8000838:	1e44      	subs	r4, r0, #1
 800083a:	41a0      	sbcs	r0, r4
 800083c:	4303      	orrs	r3, r0
 800083e:	4652      	mov	r2, sl
 8000840:	000d      	movs	r5, r1
 8000842:	0034      	movs	r4, r6
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	e6dc      	b.n	8000602 <__aeabi_fsub+0x7a>
 8000848:	4663      	mov	r3, ip
 800084a:	4652      	mov	r2, sl
 800084c:	1a9e      	subs	r6, r3, r2
 800084e:	0173      	lsls	r3, r6, #5
 8000850:	d417      	bmi.n	8000882 <__aeabi_fsub+0x2fa>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x2d0>
 8000856:	e6d9      	b.n	800060c <__aeabi_fsub+0x84>
 8000858:	2500      	movs	r5, #0
 800085a:	2000      	movs	r0, #0
 800085c:	2700      	movs	r7, #0
 800085e:	e6fa      	b.n	8000656 <__aeabi_fsub+0xce>
 8000860:	4663      	mov	r3, ip
 8000862:	2b00      	cmp	r3, #0
 8000864:	d044      	beq.n	80008f0 <__aeabi_fsub+0x368>
 8000866:	3901      	subs	r1, #1
 8000868:	2900      	cmp	r1, #0
 800086a:	d04c      	beq.n	8000906 <__aeabi_fsub+0x37e>
 800086c:	2eff      	cmp	r6, #255	; 0xff
 800086e:	d000      	beq.n	8000872 <__aeabi_fsub+0x2ea>
 8000870:	e771      	b.n	8000756 <__aeabi_fsub+0x1ce>
 8000872:	4643      	mov	r3, r8
 8000874:	e73e      	b.n	80006f4 <__aeabi_fsub+0x16c>
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d0c5      	beq.n	8000806 <__aeabi_fsub+0x27e>
 800087a:	4652      	mov	r2, sl
 800087c:	4462      	add	r2, ip
 800087e:	0853      	lsrs	r3, r2, #1
 8000880:	e7b6      	b.n	80007f0 <__aeabi_fsub+0x268>
 8000882:	4663      	mov	r3, ip
 8000884:	000d      	movs	r5, r1
 8000886:	1ad6      	subs	r6, r2, r3
 8000888:	e6c0      	b.n	800060c <__aeabi_fsub+0x84>
 800088a:	4662      	mov	r2, ip
 800088c:	2a00      	cmp	r2, #0
 800088e:	d116      	bne.n	80008be <__aeabi_fsub+0x336>
 8000890:	4653      	mov	r3, sl
 8000892:	2b00      	cmp	r3, #0
 8000894:	d000      	beq.n	8000898 <__aeabi_fsub+0x310>
 8000896:	e72b      	b.n	80006f0 <__aeabi_fsub+0x168>
 8000898:	2780      	movs	r7, #128	; 0x80
 800089a:	2500      	movs	r5, #0
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	03ff      	lsls	r7, r7, #15
 80008a0:	e6d9      	b.n	8000656 <__aeabi_fsub+0xce>
 80008a2:	000d      	movs	r5, r1
 80008a4:	4643      	mov	r3, r8
 80008a6:	0034      	movs	r4, r6
 80008a8:	e7a6      	b.n	80007f8 <__aeabi_fsub+0x270>
 80008aa:	4653      	mov	r3, sl
 80008ac:	4463      	add	r3, ip
 80008ae:	e6f7      	b.n	80006a0 <__aeabi_fsub+0x118>
 80008b0:	4663      	mov	r3, ip
 80008b2:	4652      	mov	r2, sl
 80008b4:	1a9b      	subs	r3, r3, r2
 80008b6:	e6a4      	b.n	8000602 <__aeabi_fsub+0x7a>
 80008b8:	4662      	mov	r2, ip
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d0d9      	beq.n	8000872 <__aeabi_fsub+0x2ea>
 80008be:	4652      	mov	r2, sl
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fsub+0x33e>
 80008c4:	e716      	b.n	80006f4 <__aeabi_fsub+0x16c>
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	03d2      	lsls	r2, r2, #15
 80008ca:	4213      	tst	r3, r2
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fsub+0x348>
 80008ce:	e711      	b.n	80006f4 <__aeabi_fsub+0x16c>
 80008d0:	4640      	mov	r0, r8
 80008d2:	4210      	tst	r0, r2
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fsub+0x350>
 80008d6:	e70d      	b.n	80006f4 <__aeabi_fsub+0x16c>
 80008d8:	e70a      	b.n	80006f0 <__aeabi_fsub+0x168>
 80008da:	4652      	mov	r2, sl
 80008dc:	000d      	movs	r5, r1
 80008de:	0034      	movs	r4, r6
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	e68e      	b.n	8000602 <__aeabi_fsub+0x7a>
 80008e4:	4653      	mov	r3, sl
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d008      	beq.n	80008fc <__aeabi_fsub+0x374>
 80008ea:	000d      	movs	r5, r1
 80008ec:	4647      	mov	r7, r8
 80008ee:	e6b2      	b.n	8000656 <__aeabi_fsub+0xce>
 80008f0:	4643      	mov	r3, r8
 80008f2:	0034      	movs	r4, r6
 80008f4:	e780      	b.n	80007f8 <__aeabi_fsub+0x270>
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <__aeabi_fsub+0x374>
 80008fa:	e779      	b.n	80007f0 <__aeabi_fsub+0x268>
 80008fc:	2500      	movs	r5, #0
 80008fe:	2700      	movs	r7, #0
 8000900:	e6a9      	b.n	8000656 <__aeabi_fsub+0xce>
 8000902:	4647      	mov	r7, r8
 8000904:	e6a7      	b.n	8000656 <__aeabi_fsub+0xce>
 8000906:	4653      	mov	r3, sl
 8000908:	0034      	movs	r4, r6
 800090a:	4463      	add	r3, ip
 800090c:	e6c8      	b.n	80006a0 <__aeabi_fsub+0x118>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	7dffffff 	.word	0x7dffffff
 8000914:	fbffffff 	.word	0xfbffffff

08000918 <__aeabi_f2iz>:
 8000918:	0241      	lsls	r1, r0, #9
 800091a:	0042      	lsls	r2, r0, #1
 800091c:	0fc3      	lsrs	r3, r0, #31
 800091e:	0a49      	lsrs	r1, r1, #9
 8000920:	2000      	movs	r0, #0
 8000922:	0e12      	lsrs	r2, r2, #24
 8000924:	2a7e      	cmp	r2, #126	; 0x7e
 8000926:	d903      	bls.n	8000930 <__aeabi_f2iz+0x18>
 8000928:	2a9d      	cmp	r2, #157	; 0x9d
 800092a:	d902      	bls.n	8000932 <__aeabi_f2iz+0x1a>
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <__aeabi_f2iz+0x3c>)
 800092e:	1898      	adds	r0, r3, r2
 8000930:	4770      	bx	lr
 8000932:	2080      	movs	r0, #128	; 0x80
 8000934:	0400      	lsls	r0, r0, #16
 8000936:	4301      	orrs	r1, r0
 8000938:	2a95      	cmp	r2, #149	; 0x95
 800093a:	dc07      	bgt.n	800094c <__aeabi_f2iz+0x34>
 800093c:	2096      	movs	r0, #150	; 0x96
 800093e:	1a82      	subs	r2, r0, r2
 8000940:	40d1      	lsrs	r1, r2
 8000942:	4248      	negs	r0, r1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f3      	bne.n	8000930 <__aeabi_f2iz+0x18>
 8000948:	0008      	movs	r0, r1
 800094a:	e7f1      	b.n	8000930 <__aeabi_f2iz+0x18>
 800094c:	3a96      	subs	r2, #150	; 0x96
 800094e:	4091      	lsls	r1, r2
 8000950:	e7f7      	b.n	8000942 <__aeabi_f2iz+0x2a>
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	7fffffff 	.word	0x7fffffff

08000958 <__aeabi_ui2f>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	1e05      	subs	r5, r0, #0
 800095c:	d00e      	beq.n	800097c <__aeabi_ui2f+0x24>
 800095e:	f000 fbad 	bl	80010bc <__clzsi2>
 8000962:	239e      	movs	r3, #158	; 0x9e
 8000964:	0004      	movs	r4, r0
 8000966:	1a1b      	subs	r3, r3, r0
 8000968:	2b96      	cmp	r3, #150	; 0x96
 800096a:	dc0c      	bgt.n	8000986 <__aeabi_ui2f+0x2e>
 800096c:	2808      	cmp	r0, #8
 800096e:	dd01      	ble.n	8000974 <__aeabi_ui2f+0x1c>
 8000970:	3c08      	subs	r4, #8
 8000972:	40a5      	lsls	r5, r4
 8000974:	026d      	lsls	r5, r5, #9
 8000976:	0a6d      	lsrs	r5, r5, #9
 8000978:	b2d8      	uxtb	r0, r3
 800097a:	e001      	b.n	8000980 <__aeabi_ui2f+0x28>
 800097c:	2000      	movs	r0, #0
 800097e:	2500      	movs	r5, #0
 8000980:	05c0      	lsls	r0, r0, #23
 8000982:	4328      	orrs	r0, r5
 8000984:	bd70      	pop	{r4, r5, r6, pc}
 8000986:	2b99      	cmp	r3, #153	; 0x99
 8000988:	dd09      	ble.n	800099e <__aeabi_ui2f+0x46>
 800098a:	0002      	movs	r2, r0
 800098c:	0029      	movs	r1, r5
 800098e:	321b      	adds	r2, #27
 8000990:	4091      	lsls	r1, r2
 8000992:	1e4a      	subs	r2, r1, #1
 8000994:	4191      	sbcs	r1, r2
 8000996:	2205      	movs	r2, #5
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	40d5      	lsrs	r5, r2
 800099c:	430d      	orrs	r5, r1
 800099e:	2c05      	cmp	r4, #5
 80009a0:	dd01      	ble.n	80009a6 <__aeabi_ui2f+0x4e>
 80009a2:	1f62      	subs	r2, r4, #5
 80009a4:	4095      	lsls	r5, r2
 80009a6:	0029      	movs	r1, r5
 80009a8:	4e08      	ldr	r6, [pc, #32]	; (80009cc <__aeabi_ui2f+0x74>)
 80009aa:	4031      	ands	r1, r6
 80009ac:	076a      	lsls	r2, r5, #29
 80009ae:	d009      	beq.n	80009c4 <__aeabi_ui2f+0x6c>
 80009b0:	200f      	movs	r0, #15
 80009b2:	4028      	ands	r0, r5
 80009b4:	2804      	cmp	r0, #4
 80009b6:	d005      	beq.n	80009c4 <__aeabi_ui2f+0x6c>
 80009b8:	3104      	adds	r1, #4
 80009ba:	014a      	lsls	r2, r1, #5
 80009bc:	d502      	bpl.n	80009c4 <__aeabi_ui2f+0x6c>
 80009be:	239f      	movs	r3, #159	; 0x9f
 80009c0:	4031      	ands	r1, r6
 80009c2:	1b1b      	subs	r3, r3, r4
 80009c4:	0189      	lsls	r1, r1, #6
 80009c6:	0a4d      	lsrs	r5, r1, #9
 80009c8:	b2d8      	uxtb	r0, r3
 80009ca:	e7d9      	b.n	8000980 <__aeabi_ui2f+0x28>
 80009cc:	fbffffff 	.word	0xfbffffff

080009d0 <__aeabi_dmul>:
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	4657      	mov	r7, sl
 80009d4:	464e      	mov	r6, r9
 80009d6:	4645      	mov	r5, r8
 80009d8:	46de      	mov	lr, fp
 80009da:	b5e0      	push	{r5, r6, r7, lr}
 80009dc:	4698      	mov	r8, r3
 80009de:	030c      	lsls	r4, r1, #12
 80009e0:	004b      	lsls	r3, r1, #1
 80009e2:	0006      	movs	r6, r0
 80009e4:	4692      	mov	sl, r2
 80009e6:	b087      	sub	sp, #28
 80009e8:	0b24      	lsrs	r4, r4, #12
 80009ea:	0d5b      	lsrs	r3, r3, #21
 80009ec:	0fcf      	lsrs	r7, r1, #31
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d06c      	beq.n	8000acc <__aeabi_dmul+0xfc>
 80009f2:	4add      	ldr	r2, [pc, #884]	; (8000d68 <__aeabi_dmul+0x398>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d100      	bne.n	80009fa <__aeabi_dmul+0x2a>
 80009f8:	e086      	b.n	8000b08 <__aeabi_dmul+0x138>
 80009fa:	0f42      	lsrs	r2, r0, #29
 80009fc:	00e4      	lsls	r4, r4, #3
 80009fe:	4314      	orrs	r4, r2
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	0412      	lsls	r2, r2, #16
 8000a04:	4314      	orrs	r4, r2
 8000a06:	4ad9      	ldr	r2, [pc, #868]	; (8000d6c <__aeabi_dmul+0x39c>)
 8000a08:	00c5      	lsls	r5, r0, #3
 8000a0a:	4694      	mov	ip, r2
 8000a0c:	4463      	add	r3, ip
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	4699      	mov	r9, r3
 8000a14:	469b      	mov	fp, r3
 8000a16:	4643      	mov	r3, r8
 8000a18:	4642      	mov	r2, r8
 8000a1a:	031e      	lsls	r6, r3, #12
 8000a1c:	0fd2      	lsrs	r2, r2, #31
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4650      	mov	r0, sl
 8000a22:	4690      	mov	r8, r2
 8000a24:	0b36      	lsrs	r6, r6, #12
 8000a26:	0d5b      	lsrs	r3, r3, #21
 8000a28:	d100      	bne.n	8000a2c <__aeabi_dmul+0x5c>
 8000a2a:	e078      	b.n	8000b1e <__aeabi_dmul+0x14e>
 8000a2c:	4ace      	ldr	r2, [pc, #824]	; (8000d68 <__aeabi_dmul+0x398>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d01d      	beq.n	8000a6e <__aeabi_dmul+0x9e>
 8000a32:	49ce      	ldr	r1, [pc, #824]	; (8000d6c <__aeabi_dmul+0x39c>)
 8000a34:	0f42      	lsrs	r2, r0, #29
 8000a36:	468c      	mov	ip, r1
 8000a38:	9900      	ldr	r1, [sp, #0]
 8000a3a:	4463      	add	r3, ip
 8000a3c:	00f6      	lsls	r6, r6, #3
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4316      	orrs	r6, r2
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	449c      	add	ip, r3
 8000a46:	0412      	lsls	r2, r2, #16
 8000a48:	4663      	mov	r3, ip
 8000a4a:	4316      	orrs	r6, r2
 8000a4c:	00c2      	lsls	r2, r0, #3
 8000a4e:	2000      	movs	r0, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	9900      	ldr	r1, [sp, #0]
 8000a54:	4643      	mov	r3, r8
 8000a56:	3101      	adds	r1, #1
 8000a58:	468c      	mov	ip, r1
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	407b      	eors	r3, r7
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	290f      	cmp	r1, #15
 8000a62:	d900      	bls.n	8000a66 <__aeabi_dmul+0x96>
 8000a64:	e07e      	b.n	8000b64 <__aeabi_dmul+0x194>
 8000a66:	4bc2      	ldr	r3, [pc, #776]	; (8000d70 <__aeabi_dmul+0x3a0>)
 8000a68:	0089      	lsls	r1, r1, #2
 8000a6a:	5859      	ldr	r1, [r3, r1]
 8000a6c:	468f      	mov	pc, r1
 8000a6e:	4652      	mov	r2, sl
 8000a70:	9b00      	ldr	r3, [sp, #0]
 8000a72:	4332      	orrs	r2, r6
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dmul+0xa8>
 8000a76:	e156      	b.n	8000d26 <__aeabi_dmul+0x356>
 8000a78:	49bb      	ldr	r1, [pc, #748]	; (8000d68 <__aeabi_dmul+0x398>)
 8000a7a:	2600      	movs	r6, #0
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	4463      	add	r3, ip
 8000a80:	4649      	mov	r1, r9
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	4319      	orrs	r1, r3
 8000a88:	4689      	mov	r9, r1
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	e7e1      	b.n	8000a52 <__aeabi_dmul+0x82>
 8000a8e:	4643      	mov	r3, r8
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	0034      	movs	r4, r6
 8000a94:	0015      	movs	r5, r2
 8000a96:	4683      	mov	fp, r0
 8000a98:	465b      	mov	r3, fp
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d05e      	beq.n	8000b5c <__aeabi_dmul+0x18c>
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dmul+0xd4>
 8000aa2:	e1f3      	b.n	8000e8c <__aeabi_dmul+0x4bc>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dmul+0xda>
 8000aa8:	e118      	b.n	8000cdc <__aeabi_dmul+0x30c>
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2400      	movs	r4, #0
 8000aae:	2500      	movs	r5, #0
 8000ab0:	9b01      	ldr	r3, [sp, #4]
 8000ab2:	0512      	lsls	r2, r2, #20
 8000ab4:	4322      	orrs	r2, r4
 8000ab6:	07db      	lsls	r3, r3, #31
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	0028      	movs	r0, r5
 8000abc:	0011      	movs	r1, r2
 8000abe:	b007      	add	sp, #28
 8000ac0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ac2:	46bb      	mov	fp, r7
 8000ac4:	46b2      	mov	sl, r6
 8000ac6:	46a9      	mov	r9, r5
 8000ac8:	46a0      	mov	r8, r4
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000acc:	0025      	movs	r5, r4
 8000ace:	4305      	orrs	r5, r0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dmul+0x104>
 8000ad2:	e141      	b.n	8000d58 <__aeabi_dmul+0x388>
 8000ad4:	2c00      	cmp	r4, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dmul+0x10a>
 8000ad8:	e1ad      	b.n	8000e36 <__aeabi_dmul+0x466>
 8000ada:	0020      	movs	r0, r4
 8000adc:	f000 faee 	bl	80010bc <__clzsi2>
 8000ae0:	0001      	movs	r1, r0
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	390b      	subs	r1, #11
 8000ae6:	231d      	movs	r3, #29
 8000ae8:	0010      	movs	r0, r2
 8000aea:	1a5b      	subs	r3, r3, r1
 8000aec:	0031      	movs	r1, r6
 8000aee:	0035      	movs	r5, r6
 8000af0:	3808      	subs	r0, #8
 8000af2:	4084      	lsls	r4, r0
 8000af4:	40d9      	lsrs	r1, r3
 8000af6:	4085      	lsls	r5, r0
 8000af8:	430c      	orrs	r4, r1
 8000afa:	489e      	ldr	r0, [pc, #632]	; (8000d74 <__aeabi_dmul+0x3a4>)
 8000afc:	1a83      	subs	r3, r0, r2
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2300      	movs	r3, #0
 8000b02:	4699      	mov	r9, r3
 8000b04:	469b      	mov	fp, r3
 8000b06:	e786      	b.n	8000a16 <__aeabi_dmul+0x46>
 8000b08:	0005      	movs	r5, r0
 8000b0a:	4325      	orrs	r5, r4
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_dmul+0x140>
 8000b0e:	e11c      	b.n	8000d4a <__aeabi_dmul+0x37a>
 8000b10:	2208      	movs	r2, #8
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2302      	movs	r3, #2
 8000b16:	2400      	movs	r4, #0
 8000b18:	4691      	mov	r9, r2
 8000b1a:	469b      	mov	fp, r3
 8000b1c:	e77b      	b.n	8000a16 <__aeabi_dmul+0x46>
 8000b1e:	4652      	mov	r2, sl
 8000b20:	4332      	orrs	r2, r6
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dmul+0x156>
 8000b24:	e10a      	b.n	8000d3c <__aeabi_dmul+0x36c>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_dmul+0x15c>
 8000b2a:	e176      	b.n	8000e1a <__aeabi_dmul+0x44a>
 8000b2c:	0030      	movs	r0, r6
 8000b2e:	f000 fac5 	bl	80010bc <__clzsi2>
 8000b32:	0002      	movs	r2, r0
 8000b34:	3a0b      	subs	r2, #11
 8000b36:	231d      	movs	r3, #29
 8000b38:	0001      	movs	r1, r0
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	4652      	mov	r2, sl
 8000b3e:	3908      	subs	r1, #8
 8000b40:	40da      	lsrs	r2, r3
 8000b42:	408e      	lsls	r6, r1
 8000b44:	4316      	orrs	r6, r2
 8000b46:	4652      	mov	r2, sl
 8000b48:	408a      	lsls	r2, r1
 8000b4a:	9b00      	ldr	r3, [sp, #0]
 8000b4c:	4989      	ldr	r1, [pc, #548]	; (8000d74 <__aeabi_dmul+0x3a4>)
 8000b4e:	1a18      	subs	r0, r3, r0
 8000b50:	0003      	movs	r3, r0
 8000b52:	468c      	mov	ip, r1
 8000b54:	4463      	add	r3, ip
 8000b56:	2000      	movs	r0, #0
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	e77a      	b.n	8000a52 <__aeabi_dmul+0x82>
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	2500      	movs	r5, #0
 8000b60:	4a81      	ldr	r2, [pc, #516]	; (8000d68 <__aeabi_dmul+0x398>)
 8000b62:	e7a5      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000b64:	0c2f      	lsrs	r7, r5, #16
 8000b66:	042d      	lsls	r5, r5, #16
 8000b68:	0c2d      	lsrs	r5, r5, #16
 8000b6a:	002b      	movs	r3, r5
 8000b6c:	0c11      	lsrs	r1, r2, #16
 8000b6e:	0412      	lsls	r2, r2, #16
 8000b70:	0c12      	lsrs	r2, r2, #16
 8000b72:	4353      	muls	r3, r2
 8000b74:	4698      	mov	r8, r3
 8000b76:	0013      	movs	r3, r2
 8000b78:	0028      	movs	r0, r5
 8000b7a:	437b      	muls	r3, r7
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	4348      	muls	r0, r1
 8000b80:	4448      	add	r0, r9
 8000b82:	4683      	mov	fp, r0
 8000b84:	4640      	mov	r0, r8
 8000b86:	000b      	movs	r3, r1
 8000b88:	0c00      	lsrs	r0, r0, #16
 8000b8a:	4682      	mov	sl, r0
 8000b8c:	4658      	mov	r0, fp
 8000b8e:	437b      	muls	r3, r7
 8000b90:	4450      	add	r0, sl
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	4581      	cmp	r9, r0
 8000b96:	d906      	bls.n	8000ba6 <__aeabi_dmul+0x1d6>
 8000b98:	469a      	mov	sl, r3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	025b      	lsls	r3, r3, #9
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	44ca      	add	sl, r9
 8000ba2:	4653      	mov	r3, sl
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	469b      	mov	fp, r3
 8000baa:	4643      	mov	r3, r8
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	0400      	lsls	r0, r0, #16
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	4443      	add	r3, r8
 8000bb8:	9304      	str	r3, [sp, #16]
 8000bba:	0c33      	lsrs	r3, r6, #16
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	002b      	movs	r3, r5
 8000bc0:	0436      	lsls	r6, r6, #16
 8000bc2:	0c36      	lsrs	r6, r6, #16
 8000bc4:	4373      	muls	r3, r6
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	0033      	movs	r3, r6
 8000bca:	437b      	muls	r3, r7
 8000bcc:	469a      	mov	sl, r3
 8000bce:	464b      	mov	r3, r9
 8000bd0:	435d      	muls	r5, r3
 8000bd2:	435f      	muls	r7, r3
 8000bd4:	4643      	mov	r3, r8
 8000bd6:	4455      	add	r5, sl
 8000bd8:	0c18      	lsrs	r0, r3, #16
 8000bda:	1940      	adds	r0, r0, r5
 8000bdc:	4582      	cmp	sl, r0
 8000bde:	d903      	bls.n	8000be8 <__aeabi_dmul+0x218>
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	469a      	mov	sl, r3
 8000be6:	4457      	add	r7, sl
 8000be8:	0c05      	lsrs	r5, r0, #16
 8000bea:	19eb      	adds	r3, r5, r7
 8000bec:	9305      	str	r3, [sp, #20]
 8000bee:	4643      	mov	r3, r8
 8000bf0:	041d      	lsls	r5, r3, #16
 8000bf2:	0c2d      	lsrs	r5, r5, #16
 8000bf4:	0400      	lsls	r0, r0, #16
 8000bf6:	1940      	adds	r0, r0, r5
 8000bf8:	0c25      	lsrs	r5, r4, #16
 8000bfa:	0424      	lsls	r4, r4, #16
 8000bfc:	0c24      	lsrs	r4, r4, #16
 8000bfe:	0027      	movs	r7, r4
 8000c00:	4357      	muls	r7, r2
 8000c02:	436a      	muls	r2, r5
 8000c04:	4690      	mov	r8, r2
 8000c06:	002a      	movs	r2, r5
 8000c08:	0c3b      	lsrs	r3, r7, #16
 8000c0a:	469a      	mov	sl, r3
 8000c0c:	434a      	muls	r2, r1
 8000c0e:	4361      	muls	r1, r4
 8000c10:	4441      	add	r1, r8
 8000c12:	4451      	add	r1, sl
 8000c14:	4483      	add	fp, r0
 8000c16:	4588      	cmp	r8, r1
 8000c18:	d903      	bls.n	8000c22 <__aeabi_dmul+0x252>
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	025b      	lsls	r3, r3, #9
 8000c1e:	4698      	mov	r8, r3
 8000c20:	4442      	add	r2, r8
 8000c22:	043f      	lsls	r7, r7, #16
 8000c24:	0c0b      	lsrs	r3, r1, #16
 8000c26:	0c3f      	lsrs	r7, r7, #16
 8000c28:	0409      	lsls	r1, r1, #16
 8000c2a:	19c9      	adds	r1, r1, r7
 8000c2c:	0027      	movs	r7, r4
 8000c2e:	4698      	mov	r8, r3
 8000c30:	464b      	mov	r3, r9
 8000c32:	4377      	muls	r7, r6
 8000c34:	435c      	muls	r4, r3
 8000c36:	436e      	muls	r6, r5
 8000c38:	435d      	muls	r5, r3
 8000c3a:	0c3b      	lsrs	r3, r7, #16
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	19a4      	adds	r4, r4, r6
 8000c40:	444c      	add	r4, r9
 8000c42:	4442      	add	r2, r8
 8000c44:	9503      	str	r5, [sp, #12]
 8000c46:	42a6      	cmp	r6, r4
 8000c48:	d904      	bls.n	8000c54 <__aeabi_dmul+0x284>
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4445      	add	r5, r8
 8000c52:	9503      	str	r5, [sp, #12]
 8000c54:	9b02      	ldr	r3, [sp, #8]
 8000c56:	043f      	lsls	r7, r7, #16
 8000c58:	445b      	add	r3, fp
 8000c5a:	001e      	movs	r6, r3
 8000c5c:	4283      	cmp	r3, r0
 8000c5e:	4180      	sbcs	r0, r0
 8000c60:	0423      	lsls	r3, r4, #16
 8000c62:	4698      	mov	r8, r3
 8000c64:	9b05      	ldr	r3, [sp, #20]
 8000c66:	0c3f      	lsrs	r7, r7, #16
 8000c68:	4447      	add	r7, r8
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	1876      	adds	r6, r6, r1
 8000c6e:	428e      	cmp	r6, r1
 8000c70:	4189      	sbcs	r1, r1
 8000c72:	4447      	add	r7, r8
 8000c74:	4240      	negs	r0, r0
 8000c76:	183d      	adds	r5, r7, r0
 8000c78:	46a8      	mov	r8, r5
 8000c7a:	4693      	mov	fp, r2
 8000c7c:	4249      	negs	r1, r1
 8000c7e:	468a      	mov	sl, r1
 8000c80:	44c3      	add	fp, r8
 8000c82:	429f      	cmp	r7, r3
 8000c84:	41bf      	sbcs	r7, r7
 8000c86:	4580      	cmp	r8, r0
 8000c88:	4180      	sbcs	r0, r0
 8000c8a:	9b03      	ldr	r3, [sp, #12]
 8000c8c:	44da      	add	sl, fp
 8000c8e:	4698      	mov	r8, r3
 8000c90:	4653      	mov	r3, sl
 8000c92:	4240      	negs	r0, r0
 8000c94:	427f      	negs	r7, r7
 8000c96:	4307      	orrs	r7, r0
 8000c98:	0c24      	lsrs	r4, r4, #16
 8000c9a:	4593      	cmp	fp, r2
 8000c9c:	4192      	sbcs	r2, r2
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	4189      	sbcs	r1, r1
 8000ca2:	193f      	adds	r7, r7, r4
 8000ca4:	0ddc      	lsrs	r4, r3, #23
 8000ca6:	9b04      	ldr	r3, [sp, #16]
 8000ca8:	0275      	lsls	r5, r6, #9
 8000caa:	431d      	orrs	r5, r3
 8000cac:	1e68      	subs	r0, r5, #1
 8000cae:	4185      	sbcs	r5, r0
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	4252      	negs	r2, r2
 8000cb4:	4249      	negs	r1, r1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	18bf      	adds	r7, r7, r2
 8000cba:	4447      	add	r7, r8
 8000cbc:	0df6      	lsrs	r6, r6, #23
 8000cbe:	027f      	lsls	r7, r7, #9
 8000cc0:	4335      	orrs	r5, r6
 8000cc2:	025a      	lsls	r2, r3, #9
 8000cc4:	433c      	orrs	r4, r7
 8000cc6:	4315      	orrs	r5, r2
 8000cc8:	01fb      	lsls	r3, r7, #7
 8000cca:	d400      	bmi.n	8000cce <__aeabi_dmul+0x2fe>
 8000ccc:	e0c1      	b.n	8000e52 <__aeabi_dmul+0x482>
 8000cce:	2101      	movs	r1, #1
 8000cd0:	086a      	lsrs	r2, r5, #1
 8000cd2:	400d      	ands	r5, r1
 8000cd4:	4315      	orrs	r5, r2
 8000cd6:	07e2      	lsls	r2, r4, #31
 8000cd8:	4315      	orrs	r5, r2
 8000cda:	0864      	lsrs	r4, r4, #1
 8000cdc:	4926      	ldr	r1, [pc, #152]	; (8000d78 <__aeabi_dmul+0x3a8>)
 8000cde:	4461      	add	r1, ip
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	dd56      	ble.n	8000d92 <__aeabi_dmul+0x3c2>
 8000ce4:	076b      	lsls	r3, r5, #29
 8000ce6:	d009      	beq.n	8000cfc <__aeabi_dmul+0x32c>
 8000ce8:	220f      	movs	r2, #15
 8000cea:	402a      	ands	r2, r5
 8000cec:	2a04      	cmp	r2, #4
 8000cee:	d005      	beq.n	8000cfc <__aeabi_dmul+0x32c>
 8000cf0:	1d2a      	adds	r2, r5, #4
 8000cf2:	42aa      	cmp	r2, r5
 8000cf4:	41ad      	sbcs	r5, r5
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1964      	adds	r4, r4, r5
 8000cfa:	0015      	movs	r5, r2
 8000cfc:	01e3      	lsls	r3, r4, #7
 8000cfe:	d504      	bpl.n	8000d0a <__aeabi_dmul+0x33a>
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <__aeabi_dmul+0x3ac>)
 8000d04:	00c9      	lsls	r1, r1, #3
 8000d06:	4014      	ands	r4, r2
 8000d08:	4461      	add	r1, ip
 8000d0a:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <__aeabi_dmul+0x3b0>)
 8000d0c:	4291      	cmp	r1, r2
 8000d0e:	dd00      	ble.n	8000d12 <__aeabi_dmul+0x342>
 8000d10:	e724      	b.n	8000b5c <__aeabi_dmul+0x18c>
 8000d12:	0762      	lsls	r2, r4, #29
 8000d14:	08ed      	lsrs	r5, r5, #3
 8000d16:	0264      	lsls	r4, r4, #9
 8000d18:	0549      	lsls	r1, r1, #21
 8000d1a:	4315      	orrs	r5, r2
 8000d1c:	0b24      	lsrs	r4, r4, #12
 8000d1e:	0d4a      	lsrs	r2, r1, #21
 8000d20:	e6c6      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000d22:	9701      	str	r7, [sp, #4]
 8000d24:	e6b8      	b.n	8000a98 <__aeabi_dmul+0xc8>
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <__aeabi_dmul+0x398>)
 8000d28:	2003      	movs	r0, #3
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	4463      	add	r3, ip
 8000d2e:	464a      	mov	r2, r9
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2303      	movs	r3, #3
 8000d34:	431a      	orrs	r2, r3
 8000d36:	4691      	mov	r9, r2
 8000d38:	4652      	mov	r2, sl
 8000d3a:	e68a      	b.n	8000a52 <__aeabi_dmul+0x82>
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	2301      	movs	r3, #1
 8000d40:	4319      	orrs	r1, r3
 8000d42:	4689      	mov	r9, r1
 8000d44:	2600      	movs	r6, #0
 8000d46:	2001      	movs	r0, #1
 8000d48:	e683      	b.n	8000a52 <__aeabi_dmul+0x82>
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2303      	movs	r3, #3
 8000d50:	0005      	movs	r5, r0
 8000d52:	4691      	mov	r9, r2
 8000d54:	469b      	mov	fp, r3
 8000d56:	e65e      	b.n	8000a16 <__aeabi_dmul+0x46>
 8000d58:	2304      	movs	r3, #4
 8000d5a:	4699      	mov	r9, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	2400      	movs	r4, #0
 8000d64:	469b      	mov	fp, r3
 8000d66:	e656      	b.n	8000a16 <__aeabi_dmul+0x46>
 8000d68:	000007ff 	.word	0x000007ff
 8000d6c:	fffffc01 	.word	0xfffffc01
 8000d70:	08003c38 	.word	0x08003c38
 8000d74:	fffffc0d 	.word	0xfffffc0d
 8000d78:	000003ff 	.word	0x000003ff
 8000d7c:	feffffff 	.word	0xfeffffff
 8000d80:	000007fe 	.word	0x000007fe
 8000d84:	2300      	movs	r3, #0
 8000d86:	2480      	movs	r4, #128	; 0x80
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <__aeabi_dmul+0x4cc>)
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	0324      	lsls	r4, r4, #12
 8000d90:	e68e      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000d92:	2001      	movs	r0, #1
 8000d94:	1a40      	subs	r0, r0, r1
 8000d96:	2838      	cmp	r0, #56	; 0x38
 8000d98:	dd00      	ble.n	8000d9c <__aeabi_dmul+0x3cc>
 8000d9a:	e686      	b.n	8000aaa <__aeabi_dmul+0xda>
 8000d9c:	281f      	cmp	r0, #31
 8000d9e:	dd5b      	ble.n	8000e58 <__aeabi_dmul+0x488>
 8000da0:	221f      	movs	r2, #31
 8000da2:	0023      	movs	r3, r4
 8000da4:	4252      	negs	r2, r2
 8000da6:	1a51      	subs	r1, r2, r1
 8000da8:	40cb      	lsrs	r3, r1
 8000daa:	0019      	movs	r1, r3
 8000dac:	2820      	cmp	r0, #32
 8000dae:	d003      	beq.n	8000db8 <__aeabi_dmul+0x3e8>
 8000db0:	4a3b      	ldr	r2, [pc, #236]	; (8000ea0 <__aeabi_dmul+0x4d0>)
 8000db2:	4462      	add	r2, ip
 8000db4:	4094      	lsls	r4, r2
 8000db6:	4325      	orrs	r5, r4
 8000db8:	1e6a      	subs	r2, r5, #1
 8000dba:	4195      	sbcs	r5, r2
 8000dbc:	002a      	movs	r2, r5
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	2107      	movs	r1, #7
 8000dc2:	000d      	movs	r5, r1
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	4015      	ands	r5, r2
 8000dc8:	4211      	tst	r1, r2
 8000dca:	d05b      	beq.n	8000e84 <__aeabi_dmul+0x4b4>
 8000dcc:	210f      	movs	r1, #15
 8000dce:	2400      	movs	r4, #0
 8000dd0:	4011      	ands	r1, r2
 8000dd2:	2904      	cmp	r1, #4
 8000dd4:	d053      	beq.n	8000e7e <__aeabi_dmul+0x4ae>
 8000dd6:	1d11      	adds	r1, r2, #4
 8000dd8:	4291      	cmp	r1, r2
 8000dda:	4192      	sbcs	r2, r2
 8000ddc:	4252      	negs	r2, r2
 8000dde:	18a4      	adds	r4, r4, r2
 8000de0:	000a      	movs	r2, r1
 8000de2:	0223      	lsls	r3, r4, #8
 8000de4:	d54b      	bpl.n	8000e7e <__aeabi_dmul+0x4ae>
 8000de6:	2201      	movs	r2, #1
 8000de8:	2400      	movs	r4, #0
 8000dea:	2500      	movs	r5, #0
 8000dec:	e660      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	031b      	lsls	r3, r3, #12
 8000df2:	421c      	tst	r4, r3
 8000df4:	d009      	beq.n	8000e0a <__aeabi_dmul+0x43a>
 8000df6:	421e      	tst	r6, r3
 8000df8:	d107      	bne.n	8000e0a <__aeabi_dmul+0x43a>
 8000dfa:	4333      	orrs	r3, r6
 8000dfc:	031c      	lsls	r4, r3, #12
 8000dfe:	4643      	mov	r3, r8
 8000e00:	0015      	movs	r5, r2
 8000e02:	0b24      	lsrs	r4, r4, #12
 8000e04:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <__aeabi_dmul+0x4cc>)
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	e652      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	0312      	lsls	r2, r2, #12
 8000e0e:	4314      	orrs	r4, r2
 8000e10:	0324      	lsls	r4, r4, #12
 8000e12:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <__aeabi_dmul+0x4cc>)
 8000e14:	0b24      	lsrs	r4, r4, #12
 8000e16:	9701      	str	r7, [sp, #4]
 8000e18:	e64a      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000e1a:	f000 f94f 	bl	80010bc <__clzsi2>
 8000e1e:	0003      	movs	r3, r0
 8000e20:	001a      	movs	r2, r3
 8000e22:	3215      	adds	r2, #21
 8000e24:	3020      	adds	r0, #32
 8000e26:	2a1c      	cmp	r2, #28
 8000e28:	dc00      	bgt.n	8000e2c <__aeabi_dmul+0x45c>
 8000e2a:	e684      	b.n	8000b36 <__aeabi_dmul+0x166>
 8000e2c:	4656      	mov	r6, sl
 8000e2e:	3b08      	subs	r3, #8
 8000e30:	2200      	movs	r2, #0
 8000e32:	409e      	lsls	r6, r3
 8000e34:	e689      	b.n	8000b4a <__aeabi_dmul+0x17a>
 8000e36:	f000 f941 	bl	80010bc <__clzsi2>
 8000e3a:	0001      	movs	r1, r0
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	3115      	adds	r1, #21
 8000e40:	3220      	adds	r2, #32
 8000e42:	291c      	cmp	r1, #28
 8000e44:	dc00      	bgt.n	8000e48 <__aeabi_dmul+0x478>
 8000e46:	e64e      	b.n	8000ae6 <__aeabi_dmul+0x116>
 8000e48:	0034      	movs	r4, r6
 8000e4a:	3808      	subs	r0, #8
 8000e4c:	2500      	movs	r5, #0
 8000e4e:	4084      	lsls	r4, r0
 8000e50:	e653      	b.n	8000afa <__aeabi_dmul+0x12a>
 8000e52:	9b00      	ldr	r3, [sp, #0]
 8000e54:	469c      	mov	ip, r3
 8000e56:	e741      	b.n	8000cdc <__aeabi_dmul+0x30c>
 8000e58:	4912      	ldr	r1, [pc, #72]	; (8000ea4 <__aeabi_dmul+0x4d4>)
 8000e5a:	0022      	movs	r2, r4
 8000e5c:	4461      	add	r1, ip
 8000e5e:	002e      	movs	r6, r5
 8000e60:	408d      	lsls	r5, r1
 8000e62:	408a      	lsls	r2, r1
 8000e64:	40c6      	lsrs	r6, r0
 8000e66:	1e69      	subs	r1, r5, #1
 8000e68:	418d      	sbcs	r5, r1
 8000e6a:	4332      	orrs	r2, r6
 8000e6c:	432a      	orrs	r2, r5
 8000e6e:	40c4      	lsrs	r4, r0
 8000e70:	0753      	lsls	r3, r2, #29
 8000e72:	d0b6      	beq.n	8000de2 <__aeabi_dmul+0x412>
 8000e74:	210f      	movs	r1, #15
 8000e76:	4011      	ands	r1, r2
 8000e78:	2904      	cmp	r1, #4
 8000e7a:	d1ac      	bne.n	8000dd6 <__aeabi_dmul+0x406>
 8000e7c:	e7b1      	b.n	8000de2 <__aeabi_dmul+0x412>
 8000e7e:	0765      	lsls	r5, r4, #29
 8000e80:	0264      	lsls	r4, r4, #9
 8000e82:	0b24      	lsrs	r4, r4, #12
 8000e84:	08d2      	lsrs	r2, r2, #3
 8000e86:	4315      	orrs	r5, r2
 8000e88:	2200      	movs	r2, #0
 8000e8a:	e611      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0312      	lsls	r2, r2, #12
 8000e90:	4314      	orrs	r4, r2
 8000e92:	0324      	lsls	r4, r4, #12
 8000e94:	4a01      	ldr	r2, [pc, #4]	; (8000e9c <__aeabi_dmul+0x4cc>)
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	e60a      	b.n	8000ab0 <__aeabi_dmul+0xe0>
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	000007ff 	.word	0x000007ff
 8000ea0:	0000043e 	.word	0x0000043e
 8000ea4:	0000041e 	.word	0x0000041e

08000ea8 <__aeabi_f2d>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	0043      	lsls	r3, r0, #1
 8000eac:	0246      	lsls	r6, r0, #9
 8000eae:	0fc4      	lsrs	r4, r0, #31
 8000eb0:	20fe      	movs	r0, #254	; 0xfe
 8000eb2:	0e1b      	lsrs	r3, r3, #24
 8000eb4:	1c59      	adds	r1, r3, #1
 8000eb6:	0a75      	lsrs	r5, r6, #9
 8000eb8:	4208      	tst	r0, r1
 8000eba:	d00c      	beq.n	8000ed6 <__aeabi_f2d+0x2e>
 8000ebc:	22e0      	movs	r2, #224	; 0xe0
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	076d      	lsls	r5, r5, #29
 8000ec4:	0b36      	lsrs	r6, r6, #12
 8000ec6:	4463      	add	r3, ip
 8000ec8:	051b      	lsls	r3, r3, #20
 8000eca:	4333      	orrs	r3, r6
 8000ecc:	07e4      	lsls	r4, r4, #31
 8000ece:	4323      	orrs	r3, r4
 8000ed0:	0028      	movs	r0, r5
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d114      	bne.n	8000f04 <__aeabi_f2d+0x5c>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d01b      	beq.n	8000f16 <__aeabi_f2d+0x6e>
 8000ede:	0028      	movs	r0, r5
 8000ee0:	f000 f8ec 	bl	80010bc <__clzsi2>
 8000ee4:	280a      	cmp	r0, #10
 8000ee6:	dc1c      	bgt.n	8000f22 <__aeabi_f2d+0x7a>
 8000ee8:	230b      	movs	r3, #11
 8000eea:	002a      	movs	r2, r5
 8000eec:	1a1b      	subs	r3, r3, r0
 8000eee:	40da      	lsrs	r2, r3
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	3315      	adds	r3, #21
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <__aeabi_f2d+0x88>)
 8000ef8:	0312      	lsls	r2, r2, #12
 8000efa:	1a1b      	subs	r3, r3, r0
 8000efc:	055b      	lsls	r3, r3, #21
 8000efe:	0b16      	lsrs	r6, r2, #12
 8000f00:	0d5b      	lsrs	r3, r3, #21
 8000f02:	e7e1      	b.n	8000ec8 <__aeabi_f2d+0x20>
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d009      	beq.n	8000f1c <__aeabi_f2d+0x74>
 8000f08:	0b32      	lsrs	r2, r6, #12
 8000f0a:	2680      	movs	r6, #128	; 0x80
 8000f0c:	0336      	lsls	r6, r6, #12
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <__aeabi_f2d+0x8c>)
 8000f10:	076d      	lsls	r5, r5, #29
 8000f12:	4316      	orrs	r6, r2
 8000f14:	e7d8      	b.n	8000ec8 <__aeabi_f2d+0x20>
 8000f16:	2300      	movs	r3, #0
 8000f18:	2600      	movs	r6, #0
 8000f1a:	e7d5      	b.n	8000ec8 <__aeabi_f2d+0x20>
 8000f1c:	2600      	movs	r6, #0
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <__aeabi_f2d+0x8c>)
 8000f20:	e7d2      	b.n	8000ec8 <__aeabi_f2d+0x20>
 8000f22:	0003      	movs	r3, r0
 8000f24:	002a      	movs	r2, r5
 8000f26:	3b0b      	subs	r3, #11
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	2500      	movs	r5, #0
 8000f2c:	e7e3      	b.n	8000ef6 <__aeabi_f2d+0x4e>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	00000389 	.word	0x00000389
 8000f34:	000007ff 	.word	0x000007ff

08000f38 <__aeabi_d2f>:
 8000f38:	0002      	movs	r2, r0
 8000f3a:	004b      	lsls	r3, r1, #1
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	0308      	lsls	r0, r1, #12
 8000f40:	0d5b      	lsrs	r3, r3, #21
 8000f42:	4e3d      	ldr	r6, [pc, #244]	; (8001038 <__aeabi_d2f+0x100>)
 8000f44:	0fcc      	lsrs	r4, r1, #31
 8000f46:	0a40      	lsrs	r0, r0, #9
 8000f48:	0f51      	lsrs	r1, r2, #29
 8000f4a:	1c5f      	adds	r7, r3, #1
 8000f4c:	4308      	orrs	r0, r1
 8000f4e:	00d5      	lsls	r5, r2, #3
 8000f50:	4237      	tst	r7, r6
 8000f52:	d00a      	beq.n	8000f6a <__aeabi_d2f+0x32>
 8000f54:	4939      	ldr	r1, [pc, #228]	; (800103c <__aeabi_d2f+0x104>)
 8000f56:	185e      	adds	r6, r3, r1
 8000f58:	2efe      	cmp	r6, #254	; 0xfe
 8000f5a:	dd16      	ble.n	8000f8a <__aeabi_d2f+0x52>
 8000f5c:	23ff      	movs	r3, #255	; 0xff
 8000f5e:	2100      	movs	r1, #0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	430b      	orrs	r3, r1
 8000f64:	07e0      	lsls	r0, r4, #31
 8000f66:	4318      	orrs	r0, r3
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <__aeabi_d2f+0x44>
 8000f6e:	4328      	orrs	r0, r5
 8000f70:	d027      	beq.n	8000fc2 <__aeabi_d2f+0x8a>
 8000f72:	2105      	movs	r1, #5
 8000f74:	0189      	lsls	r1, r1, #6
 8000f76:	0a49      	lsrs	r1, r1, #9
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	e7f1      	b.n	8000f60 <__aeabi_d2f+0x28>
 8000f7c:	4305      	orrs	r5, r0
 8000f7e:	d0ed      	beq.n	8000f5c <__aeabi_d2f+0x24>
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	03c9      	lsls	r1, r1, #15
 8000f84:	23ff      	movs	r3, #255	; 0xff
 8000f86:	4301      	orrs	r1, r0
 8000f88:	e7ea      	b.n	8000f60 <__aeabi_d2f+0x28>
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	dd1c      	ble.n	8000fc8 <__aeabi_d2f+0x90>
 8000f8e:	0192      	lsls	r2, r2, #6
 8000f90:	0011      	movs	r1, r2
 8000f92:	1e4a      	subs	r2, r1, #1
 8000f94:	4191      	sbcs	r1, r2
 8000f96:	00c0      	lsls	r0, r0, #3
 8000f98:	0f6d      	lsrs	r5, r5, #29
 8000f9a:	4301      	orrs	r1, r0
 8000f9c:	4329      	orrs	r1, r5
 8000f9e:	074b      	lsls	r3, r1, #29
 8000fa0:	d048      	beq.n	8001034 <__aeabi_d2f+0xfc>
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d000      	beq.n	8000fac <__aeabi_d2f+0x74>
 8000faa:	3104      	adds	r1, #4
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	400b      	ands	r3, r1
 8000fb2:	d03f      	beq.n	8001034 <__aeabi_d2f+0xfc>
 8000fb4:	1c72      	adds	r2, r6, #1
 8000fb6:	2efe      	cmp	r6, #254	; 0xfe
 8000fb8:	d0d0      	beq.n	8000f5c <__aeabi_d2f+0x24>
 8000fba:	0189      	lsls	r1, r1, #6
 8000fbc:	0a49      	lsrs	r1, r1, #9
 8000fbe:	b2d3      	uxtb	r3, r2
 8000fc0:	e7ce      	b.n	8000f60 <__aeabi_d2f+0x28>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e7cb      	b.n	8000f60 <__aeabi_d2f+0x28>
 8000fc8:	0032      	movs	r2, r6
 8000fca:	3217      	adds	r2, #23
 8000fcc:	db22      	blt.n	8001014 <__aeabi_d2f+0xdc>
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	221e      	movs	r2, #30
 8000fd2:	0409      	lsls	r1, r1, #16
 8000fd4:	4308      	orrs	r0, r1
 8000fd6:	1b92      	subs	r2, r2, r6
 8000fd8:	2a1f      	cmp	r2, #31
 8000fda:	dd1d      	ble.n	8001018 <__aeabi_d2f+0xe0>
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4249      	negs	r1, r1
 8000fe0:	1b8e      	subs	r6, r1, r6
 8000fe2:	0001      	movs	r1, r0
 8000fe4:	40f1      	lsrs	r1, r6
 8000fe6:	000e      	movs	r6, r1
 8000fe8:	2a20      	cmp	r2, #32
 8000fea:	d004      	beq.n	8000ff6 <__aeabi_d2f+0xbe>
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <__aeabi_d2f+0x108>)
 8000fee:	4694      	mov	ip, r2
 8000ff0:	4463      	add	r3, ip
 8000ff2:	4098      	lsls	r0, r3
 8000ff4:	4305      	orrs	r5, r0
 8000ff6:	0029      	movs	r1, r5
 8000ff8:	1e4d      	subs	r5, r1, #1
 8000ffa:	41a9      	sbcs	r1, r5
 8000ffc:	4331      	orrs	r1, r6
 8000ffe:	2600      	movs	r6, #0
 8001000:	074b      	lsls	r3, r1, #29
 8001002:	d1ce      	bne.n	8000fa2 <__aeabi_d2f+0x6a>
 8001004:	2080      	movs	r0, #128	; 0x80
 8001006:	000b      	movs	r3, r1
 8001008:	04c0      	lsls	r0, r0, #19
 800100a:	2201      	movs	r2, #1
 800100c:	4003      	ands	r3, r0
 800100e:	4201      	tst	r1, r0
 8001010:	d1d3      	bne.n	8000fba <__aeabi_d2f+0x82>
 8001012:	e7af      	b.n	8000f74 <__aeabi_d2f+0x3c>
 8001014:	2300      	movs	r3, #0
 8001016:	e7ac      	b.n	8000f72 <__aeabi_d2f+0x3a>
 8001018:	490a      	ldr	r1, [pc, #40]	; (8001044 <__aeabi_d2f+0x10c>)
 800101a:	468c      	mov	ip, r1
 800101c:	0029      	movs	r1, r5
 800101e:	4463      	add	r3, ip
 8001020:	40d1      	lsrs	r1, r2
 8001022:	409d      	lsls	r5, r3
 8001024:	000a      	movs	r2, r1
 8001026:	0029      	movs	r1, r5
 8001028:	4098      	lsls	r0, r3
 800102a:	1e4d      	subs	r5, r1, #1
 800102c:	41a9      	sbcs	r1, r5
 800102e:	4301      	orrs	r1, r0
 8001030:	4311      	orrs	r1, r2
 8001032:	e7e4      	b.n	8000ffe <__aeabi_d2f+0xc6>
 8001034:	0033      	movs	r3, r6
 8001036:	e79d      	b.n	8000f74 <__aeabi_d2f+0x3c>
 8001038:	000007fe 	.word	0x000007fe
 800103c:	fffffc80 	.word	0xfffffc80
 8001040:	fffffca2 	.word	0xfffffca2
 8001044:	fffffc82 	.word	0xfffffc82

08001048 <__aeabi_cfrcmple>:
 8001048:	4684      	mov	ip, r0
 800104a:	1c08      	adds	r0, r1, #0
 800104c:	4661      	mov	r1, ip
 800104e:	e7ff      	b.n	8001050 <__aeabi_cfcmpeq>

08001050 <__aeabi_cfcmpeq>:
 8001050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001052:	f000 f8c5 	bl	80011e0 <__lesf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	d401      	bmi.n	800105e <__aeabi_cfcmpeq+0xe>
 800105a:	2100      	movs	r1, #0
 800105c:	42c8      	cmn	r0, r1
 800105e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001060 <__aeabi_fcmpeq>:
 8001060:	b510      	push	{r4, lr}
 8001062:	f000 f849 	bl	80010f8 <__eqsf2>
 8001066:	4240      	negs	r0, r0
 8001068:	3001      	adds	r0, #1
 800106a:	bd10      	pop	{r4, pc}

0800106c <__aeabi_fcmplt>:
 800106c:	b510      	push	{r4, lr}
 800106e:	f000 f8b7 	bl	80011e0 <__lesf2>
 8001072:	2800      	cmp	r0, #0
 8001074:	db01      	blt.n	800107a <__aeabi_fcmplt+0xe>
 8001076:	2000      	movs	r0, #0
 8001078:	bd10      	pop	{r4, pc}
 800107a:	2001      	movs	r0, #1
 800107c:	bd10      	pop	{r4, pc}
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <__aeabi_fcmple>:
 8001080:	b510      	push	{r4, lr}
 8001082:	f000 f8ad 	bl	80011e0 <__lesf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	dd01      	ble.n	800108e <__aeabi_fcmple+0xe>
 800108a:	2000      	movs	r0, #0
 800108c:	bd10      	pop	{r4, pc}
 800108e:	2001      	movs	r0, #1
 8001090:	bd10      	pop	{r4, pc}
 8001092:	46c0      	nop			; (mov r8, r8)

08001094 <__aeabi_fcmpgt>:
 8001094:	b510      	push	{r4, lr}
 8001096:	f000 f857 	bl	8001148 <__gesf2>
 800109a:	2800      	cmp	r0, #0
 800109c:	dc01      	bgt.n	80010a2 <__aeabi_fcmpgt+0xe>
 800109e:	2000      	movs	r0, #0
 80010a0:	bd10      	pop	{r4, pc}
 80010a2:	2001      	movs	r0, #1
 80010a4:	bd10      	pop	{r4, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)

080010a8 <__aeabi_fcmpge>:
 80010a8:	b510      	push	{r4, lr}
 80010aa:	f000 f84d 	bl	8001148 <__gesf2>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	da01      	bge.n	80010b6 <__aeabi_fcmpge+0xe>
 80010b2:	2000      	movs	r0, #0
 80010b4:	bd10      	pop	{r4, pc}
 80010b6:	2001      	movs	r0, #1
 80010b8:	bd10      	pop	{r4, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)

080010bc <__clzsi2>:
 80010bc:	211c      	movs	r1, #28
 80010be:	2301      	movs	r3, #1
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d301      	bcc.n	80010ca <__clzsi2+0xe>
 80010c6:	0c00      	lsrs	r0, r0, #16
 80010c8:	3910      	subs	r1, #16
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	4298      	cmp	r0, r3
 80010ce:	d301      	bcc.n	80010d4 <__clzsi2+0x18>
 80010d0:	0a00      	lsrs	r0, r0, #8
 80010d2:	3908      	subs	r1, #8
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	4298      	cmp	r0, r3
 80010d8:	d301      	bcc.n	80010de <__clzsi2+0x22>
 80010da:	0900      	lsrs	r0, r0, #4
 80010dc:	3904      	subs	r1, #4
 80010de:	a202      	add	r2, pc, #8	; (adr r2, 80010e8 <__clzsi2+0x2c>)
 80010e0:	5c10      	ldrb	r0, [r2, r0]
 80010e2:	1840      	adds	r0, r0, r1
 80010e4:	4770      	bx	lr
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	02020304 	.word	0x02020304
 80010ec:	01010101 	.word	0x01010101
	...

080010f8 <__eqsf2>:
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	0042      	lsls	r2, r0, #1
 80010fc:	024e      	lsls	r6, r1, #9
 80010fe:	004c      	lsls	r4, r1, #1
 8001100:	0245      	lsls	r5, r0, #9
 8001102:	0a6d      	lsrs	r5, r5, #9
 8001104:	0e12      	lsrs	r2, r2, #24
 8001106:	0fc3      	lsrs	r3, r0, #31
 8001108:	0a76      	lsrs	r6, r6, #9
 800110a:	0e24      	lsrs	r4, r4, #24
 800110c:	0fc9      	lsrs	r1, r1, #31
 800110e:	2aff      	cmp	r2, #255	; 0xff
 8001110:	d00f      	beq.n	8001132 <__eqsf2+0x3a>
 8001112:	2cff      	cmp	r4, #255	; 0xff
 8001114:	d011      	beq.n	800113a <__eqsf2+0x42>
 8001116:	2001      	movs	r0, #1
 8001118:	42a2      	cmp	r2, r4
 800111a:	d000      	beq.n	800111e <__eqsf2+0x26>
 800111c:	bd70      	pop	{r4, r5, r6, pc}
 800111e:	42b5      	cmp	r5, r6
 8001120:	d1fc      	bne.n	800111c <__eqsf2+0x24>
 8001122:	428b      	cmp	r3, r1
 8001124:	d00d      	beq.n	8001142 <__eqsf2+0x4a>
 8001126:	2a00      	cmp	r2, #0
 8001128:	d1f8      	bne.n	800111c <__eqsf2+0x24>
 800112a:	0028      	movs	r0, r5
 800112c:	1e45      	subs	r5, r0, #1
 800112e:	41a8      	sbcs	r0, r5
 8001130:	e7f4      	b.n	800111c <__eqsf2+0x24>
 8001132:	2001      	movs	r0, #1
 8001134:	2d00      	cmp	r5, #0
 8001136:	d1f1      	bne.n	800111c <__eqsf2+0x24>
 8001138:	e7eb      	b.n	8001112 <__eqsf2+0x1a>
 800113a:	2001      	movs	r0, #1
 800113c:	2e00      	cmp	r6, #0
 800113e:	d1ed      	bne.n	800111c <__eqsf2+0x24>
 8001140:	e7e9      	b.n	8001116 <__eqsf2+0x1e>
 8001142:	2000      	movs	r0, #0
 8001144:	e7ea      	b.n	800111c <__eqsf2+0x24>
 8001146:	46c0      	nop			; (mov r8, r8)

08001148 <__gesf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	0042      	lsls	r2, r0, #1
 800114c:	0246      	lsls	r6, r0, #9
 800114e:	024d      	lsls	r5, r1, #9
 8001150:	004c      	lsls	r4, r1, #1
 8001152:	0fc3      	lsrs	r3, r0, #31
 8001154:	0a76      	lsrs	r6, r6, #9
 8001156:	0e12      	lsrs	r2, r2, #24
 8001158:	0a6d      	lsrs	r5, r5, #9
 800115a:	0e24      	lsrs	r4, r4, #24
 800115c:	0fc8      	lsrs	r0, r1, #31
 800115e:	2aff      	cmp	r2, #255	; 0xff
 8001160:	d01f      	beq.n	80011a2 <__gesf2+0x5a>
 8001162:	2cff      	cmp	r4, #255	; 0xff
 8001164:	d010      	beq.n	8001188 <__gesf2+0x40>
 8001166:	2a00      	cmp	r2, #0
 8001168:	d11f      	bne.n	80011aa <__gesf2+0x62>
 800116a:	4271      	negs	r1, r6
 800116c:	4171      	adcs	r1, r6
 800116e:	2c00      	cmp	r4, #0
 8001170:	d101      	bne.n	8001176 <__gesf2+0x2e>
 8001172:	2d00      	cmp	r5, #0
 8001174:	d01e      	beq.n	80011b4 <__gesf2+0x6c>
 8001176:	2900      	cmp	r1, #0
 8001178:	d10e      	bne.n	8001198 <__gesf2+0x50>
 800117a:	4283      	cmp	r3, r0
 800117c:	d01e      	beq.n	80011bc <__gesf2+0x74>
 800117e:	2102      	movs	r1, #2
 8001180:	1e58      	subs	r0, r3, #1
 8001182:	4008      	ands	r0, r1
 8001184:	3801      	subs	r0, #1
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001188:	2d00      	cmp	r5, #0
 800118a:	d126      	bne.n	80011da <__gesf2+0x92>
 800118c:	2a00      	cmp	r2, #0
 800118e:	d1f4      	bne.n	800117a <__gesf2+0x32>
 8001190:	4271      	negs	r1, r6
 8001192:	4171      	adcs	r1, r6
 8001194:	2900      	cmp	r1, #0
 8001196:	d0f0      	beq.n	800117a <__gesf2+0x32>
 8001198:	2800      	cmp	r0, #0
 800119a:	d1f4      	bne.n	8001186 <__gesf2+0x3e>
 800119c:	2001      	movs	r0, #1
 800119e:	4240      	negs	r0, r0
 80011a0:	e7f1      	b.n	8001186 <__gesf2+0x3e>
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	d119      	bne.n	80011da <__gesf2+0x92>
 80011a6:	2cff      	cmp	r4, #255	; 0xff
 80011a8:	d0ee      	beq.n	8001188 <__gesf2+0x40>
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	d1e5      	bne.n	800117a <__gesf2+0x32>
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	d1e3      	bne.n	800117a <__gesf2+0x32>
 80011b2:	e7e4      	b.n	800117e <__gesf2+0x36>
 80011b4:	2000      	movs	r0, #0
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d0e5      	beq.n	8001186 <__gesf2+0x3e>
 80011ba:	e7e0      	b.n	800117e <__gesf2+0x36>
 80011bc:	42a2      	cmp	r2, r4
 80011be:	dc05      	bgt.n	80011cc <__gesf2+0x84>
 80011c0:	dbea      	blt.n	8001198 <__gesf2+0x50>
 80011c2:	42ae      	cmp	r6, r5
 80011c4:	d802      	bhi.n	80011cc <__gesf2+0x84>
 80011c6:	d3e7      	bcc.n	8001198 <__gesf2+0x50>
 80011c8:	2000      	movs	r0, #0
 80011ca:	e7dc      	b.n	8001186 <__gesf2+0x3e>
 80011cc:	4241      	negs	r1, r0
 80011ce:	4141      	adcs	r1, r0
 80011d0:	4248      	negs	r0, r1
 80011d2:	2102      	movs	r1, #2
 80011d4:	4008      	ands	r0, r1
 80011d6:	3801      	subs	r0, #1
 80011d8:	e7d5      	b.n	8001186 <__gesf2+0x3e>
 80011da:	2002      	movs	r0, #2
 80011dc:	4240      	negs	r0, r0
 80011de:	e7d2      	b.n	8001186 <__gesf2+0x3e>

080011e0 <__lesf2>:
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	0042      	lsls	r2, r0, #1
 80011e4:	0246      	lsls	r6, r0, #9
 80011e6:	024d      	lsls	r5, r1, #9
 80011e8:	004c      	lsls	r4, r1, #1
 80011ea:	0fc3      	lsrs	r3, r0, #31
 80011ec:	0a76      	lsrs	r6, r6, #9
 80011ee:	0e12      	lsrs	r2, r2, #24
 80011f0:	0a6d      	lsrs	r5, r5, #9
 80011f2:	0e24      	lsrs	r4, r4, #24
 80011f4:	0fc8      	lsrs	r0, r1, #31
 80011f6:	2aff      	cmp	r2, #255	; 0xff
 80011f8:	d00d      	beq.n	8001216 <__lesf2+0x36>
 80011fa:	2cff      	cmp	r4, #255	; 0xff
 80011fc:	d00f      	beq.n	800121e <__lesf2+0x3e>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d123      	bne.n	800124a <__lesf2+0x6a>
 8001202:	4271      	negs	r1, r6
 8001204:	4171      	adcs	r1, r6
 8001206:	2c00      	cmp	r4, #0
 8001208:	d10f      	bne.n	800122a <__lesf2+0x4a>
 800120a:	2d00      	cmp	r5, #0
 800120c:	d10d      	bne.n	800122a <__lesf2+0x4a>
 800120e:	2000      	movs	r0, #0
 8001210:	2e00      	cmp	r6, #0
 8001212:	d014      	beq.n	800123e <__lesf2+0x5e>
 8001214:	e00d      	b.n	8001232 <__lesf2+0x52>
 8001216:	2e00      	cmp	r6, #0
 8001218:	d110      	bne.n	800123c <__lesf2+0x5c>
 800121a:	2cff      	cmp	r4, #255	; 0xff
 800121c:	d115      	bne.n	800124a <__lesf2+0x6a>
 800121e:	2d00      	cmp	r5, #0
 8001220:	d10c      	bne.n	800123c <__lesf2+0x5c>
 8001222:	2a00      	cmp	r2, #0
 8001224:	d103      	bne.n	800122e <__lesf2+0x4e>
 8001226:	4271      	negs	r1, r6
 8001228:	4171      	adcs	r1, r6
 800122a:	2900      	cmp	r1, #0
 800122c:	d108      	bne.n	8001240 <__lesf2+0x60>
 800122e:	4283      	cmp	r3, r0
 8001230:	d010      	beq.n	8001254 <__lesf2+0x74>
 8001232:	2102      	movs	r1, #2
 8001234:	1e58      	subs	r0, r3, #1
 8001236:	4008      	ands	r0, r1
 8001238:	3801      	subs	r0, #1
 800123a:	e000      	b.n	800123e <__lesf2+0x5e>
 800123c:	2002      	movs	r0, #2
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001240:	2800      	cmp	r0, #0
 8001242:	d1fc      	bne.n	800123e <__lesf2+0x5e>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7f9      	b.n	800123e <__lesf2+0x5e>
 800124a:	2c00      	cmp	r4, #0
 800124c:	d1ef      	bne.n	800122e <__lesf2+0x4e>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d1ed      	bne.n	800122e <__lesf2+0x4e>
 8001252:	e7ee      	b.n	8001232 <__lesf2+0x52>
 8001254:	42a2      	cmp	r2, r4
 8001256:	dc05      	bgt.n	8001264 <__lesf2+0x84>
 8001258:	dbf2      	blt.n	8001240 <__lesf2+0x60>
 800125a:	42ae      	cmp	r6, r5
 800125c:	d802      	bhi.n	8001264 <__lesf2+0x84>
 800125e:	d3ef      	bcc.n	8001240 <__lesf2+0x60>
 8001260:	2000      	movs	r0, #0
 8001262:	e7ec      	b.n	800123e <__lesf2+0x5e>
 8001264:	4241      	negs	r1, r0
 8001266:	4141      	adcs	r1, r0
 8001268:	4248      	negs	r0, r1
 800126a:	2102      	movs	r1, #2
 800126c:	4008      	ands	r0, r1
 800126e:	3801      	subs	r0, #1
 8001270:	e7e5      	b.n	800123e <__lesf2+0x5e>
 8001272:	46c0      	nop			; (mov r8, r8)

08001274 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_CAN_Init+0x68>)
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <MX_CAN_Init+0x6c>)
 800127c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_CAN_Init+0x68>)
 8001280:	2206      	movs	r2, #6
 8001282:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_CAN_Init+0x68>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_CAN_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_CAN_Init+0x68>)
 8001292:	22c0      	movs	r2, #192	; 0xc0
 8001294:	0312      	lsls	r2, r2, #12
 8001296:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_CAN_Init+0x68>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	0352      	lsls	r2, r2, #13
 800129e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_CAN_Init+0x68>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_CAN_Init+0x68>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_CAN_Init+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_CAN_Init+0x68>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_CAN_Init+0x68>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_CAN_Init+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <MX_CAN_Init+0x68>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fc34 	bl	8001b34 <HAL_CAN_Init>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012d0:	f000 fa54 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	2000005c 	.word	0x2000005c
 80012e0:	40006400 	.word	0x40006400

080012e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b08b      	sub	sp, #44	; 0x2c
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	2414      	movs	r4, #20
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	0018      	movs	r0, r3
 80012f2:	2314      	movs	r3, #20
 80012f4:	001a      	movs	r2, r3
 80012f6:	2100      	movs	r1, #0
 80012f8:	f002 fc7a 	bl	8003bf0 <memset>
  if(canHandle->Instance==CAN)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_CAN_MspInit+0x94>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d133      	bne.n	800136e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_CAN_MspInit+0x98>)
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_CAN_MspInit+0x98>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0489      	lsls	r1, r1, #18
 8001310:	430a      	orrs	r2, r1
 8001312:	61da      	str	r2, [r3, #28]
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_CAN_MspInit+0x98>)
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	049b      	lsls	r3, r3, #18
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_CAN_MspInit+0x98>)
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_CAN_MspInit+0x98>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0289      	lsls	r1, r1, #10
 800132c:	430a      	orrs	r2, r1
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_CAN_MspInit+0x98>)
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	22c0      	movs	r2, #192	; 0xc0
 8001342:	0152      	lsls	r2, r2, #5
 8001344:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	0021      	movs	r1, r4
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2202      	movs	r2, #2
 800134c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2203      	movs	r2, #3
 8001358:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2204      	movs	r2, #4
 800135e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	187a      	adds	r2, r7, r1
 8001362:	2390      	movs	r3, #144	; 0x90
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f001 f8f1 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b00b      	add	sp, #44	; 0x2c
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	40006400 	.word	0x40006400
 800137c:	40021000 	.word	0x40021000

08001380 <CAN_Init>:
  /* USER CODE END CAN_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CAN_Init(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <CAN_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <CAN_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <CAN_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <CAN_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <CAN_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <CAN_Init+0x64>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	61da      	str	r2, [r3, #28]
	//sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
	sFilterConfig.FilterActivation = ENABLE;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <CAN_Init+0x64>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80013ae:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <CAN_Init+0x64>)
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <CAN_Init+0x68>)
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 fcbb 	bl	8001d30 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <CAN_Init+0x68>)
 80013bc:	2102      	movs	r1, #2
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 ffe8 	bl	8002394 <HAL_CAN_ActivateNotification>

	can_TX_ID0.DLC = 1;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <CAN_Init+0x6c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	611a      	str	r2, [r3, #16]
	can_TX_ID0.IDE = CAN_ID_STD;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <CAN_Init+0x6c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
	can_TX_ID0.RTR = CAN_RTR_DATA;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <CAN_Init+0x6c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
	can_TX_ID0.StdId = header_id;
 80013d6:	220e      	movs	r2, #14
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <CAN_Init+0x6c>)
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20000034 	.word	0x20000034
 80013e8:	2000005c 	.word	0x2000005c
 80013ec:	200000a0 	.word	0x200000a0

080013f0 <CAN_Send_Data>:
void CAN_Send_Data(float val) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

	can1++;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <CAN_Send_Data+0x44>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <CAN_Send_Data+0x44>)
 8001400:	601a      	str	r2, [r3, #0]
	uint8_t can_data = (uint8_t)val;
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7fe ff0c 	bl	8000220 <__aeabi_f2uiz>
 8001408:	0003      	movs	r3, r0
 800140a:	b2da      	uxtb	r2, r3
 800140c:	210f      	movs	r1, #15
 800140e:	187b      	adds	r3, r7, r1
 8001410:	701a      	strb	r2, [r3, #0]
	if(HAL_CAN_AddTxMessage(&hcan, &can_TX_ID0, &can_data, &TxMailbox) == HAL_OK) {
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <CAN_Send_Data+0x48>)
 8001414:	187a      	adds	r2, r7, r1
 8001416:	4909      	ldr	r1, [pc, #36]	; (800143c <CAN_Send_Data+0x4c>)
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <CAN_Send_Data+0x50>)
 800141a:	f000 fdc1 	bl	8001fa0 <HAL_CAN_AddTxMessage>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d104      	bne.n	800142c <CAN_Send_Data+0x3c>
		can2++;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <CAN_Send_Data+0x54>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <CAN_Send_Data+0x54>)
 800142a:	601a      	str	r2, [r3, #0]
	}
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000d0 	.word	0x200000d0
 8001438:	200000b8 	.word	0x200000b8
 800143c:	200000a0 	.word	0x200000a0
 8001440:	2000005c 	.word	0x2000005c
 8001444:	200000c4 	.word	0x200000c4

08001448 <CAN_RX>:
void CAN_RX(){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	   if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_RX_Header, RxData) == HAL_OK)
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <CAN_RX+0x40>)
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <CAN_RX+0x44>)
 8001450:	480f      	ldr	r0, [pc, #60]	; (8001490 <CAN_RX+0x48>)
 8001452:	2100      	movs	r1, #0
 8001454:	f000 fe82 	bl	800215c <HAL_CAN_GetRxMessage>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d10c      	bne.n	8001476 <CAN_RX+0x2e>
	    {
	        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	019b      	lsls	r3, r3, #6
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <CAN_RX+0x4c>)
 8001462:	0019      	movs	r1, r3
 8001464:	0010      	movs	r0, r2
 8001466:	f001 fa15 	bl	8002894 <HAL_GPIO_TogglePin>
	        can_count_RX++;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <CAN_RX+0x50>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <CAN_RX+0x50>)
 8001472:	601a      	str	r2, [r3, #0]
	    }
	    else {can_count_RX_zero++;}
}
 8001474:	e004      	b.n	8001480 <CAN_RX+0x38>
	    else {can_count_RX_zero++;}
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <CAN_RX+0x54>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <CAN_RX+0x54>)
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	20000028 	.word	0x20000028
 800148c:	20000084 	.word	0x20000084
 8001490:	2000005c 	.word	0x2000005c
 8001494:	48000800 	.word	0x48000800
 8001498:	200000bc 	.word	0x200000bc
 800149c:	200000c0 	.word	0x200000c0

080014a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	0018      	movs	r0, r3
 80014aa:	2314      	movs	r3, #20
 80014ac:	001a      	movs	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	f002 fb9e 	bl	8003bf0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_GPIO_Init+0x8c>)
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_GPIO_Init+0x8c>)
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	0289      	lsls	r1, r1, #10
 80014be:	430a      	orrs	r2, r1
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_GPIO_Init+0x8c>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80014d0:	2390      	movs	r3, #144	; 0x90
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	2200      	movs	r2, #0
 80014d6:	2120      	movs	r1, #32
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 f9be 	bl	800285a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2220      	movs	r2, #32
 80014e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2201      	movs	r2, #1
 80014e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80014f6:	1d3a      	adds	r2, r7, #4
 80014f8:	2390      	movs	r3, #144	; 0x90
 80014fa:	05db      	lsls	r3, r3, #23
 80014fc:	0011      	movs	r1, r2
 80014fe:	0018      	movs	r0, r3
 8001500:	f001 f826 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2240      	movs	r2, #64	; 0x40
 8001508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001516:	1d3a      	adds	r2, r7, #4
 8001518:	2390      	movs	r3, #144	; 0x90
 800151a:	05db      	lsls	r3, r3, #23
 800151c:	0011      	movs	r1, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f001 f816 	bl	8002550 <HAL_GPIO_Init>

}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b006      	add	sp, #24
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f000 fa75 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 f8ad 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f7ff ffaf 	bl	80014a0 <MX_GPIO_Init>
  MX_CAN_Init();
 8001542:	f7ff fe97 	bl	8001274 <MX_CAN_Init>
  MX_TIM2_Init();
 8001546:	f000 f967 	bl	8001818 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  CAN_Init();
 800154a:	f7ff ff19 	bl	8001380 <CAN_Init>
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800154e:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <main+0x148>)
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <main+0x14c>)
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f000 fbeb 	bl	8001d30 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 800155a:	4b48      	ldr	r3, [pc, #288]	; (800167c <main+0x14c>)
 800155c:	0018      	movs	r0, r3
 800155e:	f000 fcd9 	bl	8001f14 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <main+0x14c>)
 8001564:	2102      	movs	r1, #2
 8001566:	0018      	movs	r0, r3
 8001568:	f000 ff14 	bl	8002394 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t time = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001570:	2390      	movs	r3, #144	; 0x90
 8001572:	05db      	lsls	r3, r3, #23
 8001574:	2200      	movs	r2, #0
 8001576:	2120      	movs	r1, #32
 8001578:	0018      	movs	r0, r3
 800157a:	f001 f96e 	bl	800285a <HAL_GPIO_WritePin>
		  usDelay(3);
 800157e:	2003      	movs	r0, #3
 8001580:	f000 f8c6 	bl	8001710 <usDelay>
		  //1. Output 10 usec TRIG
		  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001584:	2390      	movs	r3, #144	; 0x90
 8001586:	05db      	lsls	r3, r3, #23
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	0018      	movs	r0, r3
 800158e:	f001 f964 	bl	800285a <HAL_GPIO_WritePin>
		  		usDelay(10);
 8001592:	200a      	movs	r0, #10
 8001594:	f000 f8bc 	bl	8001710 <usDelay>
		  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001598:	2390      	movs	r3, #144	; 0x90
 800159a:	05db      	lsls	r3, r3, #23
 800159c:	2200      	movs	r2, #0
 800159e:	2120      	movs	r1, #32
 80015a0:	0018      	movs	r0, r3
 80015a2:	f001 f95a 	bl	800285a <HAL_GPIO_WritePin>

		  		//2. Wait for ECHO pin rising edge
		  		time = HAL_GetTick();
 80015a6:	f000 fa97 	bl	8001ad8 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	607b      	str	r3, [r7, #4]
		  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET){
 80015ae:	e008      	b.n	80015c2 <main+0x92>
		  			if (HAL_GetTick() - time > 2000) break;
 80015b0:	f000 fa92 	bl	8001ad8 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1ad2      	subs	r2, r2, r3
 80015ba:	23fa      	movs	r3, #250	; 0xfa
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	429a      	cmp	r2, r3
 80015c0:	d808      	bhi.n	80015d4 <main+0xa4>
		  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET){
 80015c2:	2390      	movs	r3, #144	; 0x90
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	0018      	movs	r0, r3
 80015ca:	f001 f929 	bl	8002820 <HAL_GPIO_ReadPin>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d0ee      	beq.n	80015b0 <main+0x80>
 80015d2:	e000      	b.n	80015d6 <main+0xa6>
		  			if (HAL_GetTick() - time > 2000) break;
 80015d4:	46c0      	nop			; (mov r8, r8)
		  		}

		  		//3. Start measuring ECHO pulse width in usec
		  		numTicks = 0;
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <main+0x150>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
		  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80015dc:	e007      	b.n	80015ee <main+0xbe>
		  		{
		  			numTicks++;
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <main+0x150>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <main+0x150>)
 80015e6:	601a      	str	r2, [r3, #0]
		  			usDelay(2); //2.8usec
 80015e8:	2002      	movs	r0, #2
 80015ea:	f000 f891 	bl	8001710 <usDelay>
		  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80015ee:	2390      	movs	r3, #144	; 0x90
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	0018      	movs	r0, r3
 80015f6:	f001 f913 	bl	8002820 <HAL_GPIO_ReadPin>
 80015fa:	0003      	movs	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d0ee      	beq.n	80015de <main+0xae>
		  		};

		  		//4. Estimate distance in cm
		  		distance = (numTicks + 0.0f)*2.8*speedOfSound*1.75;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <main+0x150>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff f9a7 	bl	8000958 <__aeabi_ui2f>
 800160a:	1c03      	adds	r3, r0, #0
 800160c:	2100      	movs	r1, #0
 800160e:	1c18      	adds	r0, r3, #0
 8001610:	f7fe fe1e 	bl	8000250 <__aeabi_fadd>
 8001614:	1c03      	adds	r3, r0, #0
 8001616:	1c18      	adds	r0, r3, #0
 8001618:	f7ff fc46 	bl	8000ea8 <__aeabi_f2d>
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <main+0x154>)
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <main+0x158>)
 8001620:	f7ff f9d6 	bl	80009d0 <__aeabi_dmul>
 8001624:	0002      	movs	r2, r0
 8001626:	000b      	movs	r3, r1
 8001628:	0014      	movs	r4, r2
 800162a:	001d      	movs	r5, r3
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <main+0x15c>)
 800162e:	1c18      	adds	r0, r3, #0
 8001630:	f7ff fc3a 	bl	8000ea8 <__aeabi_f2d>
 8001634:	0002      	movs	r2, r0
 8001636:	000b      	movs	r3, r1
 8001638:	0020      	movs	r0, r4
 800163a:	0029      	movs	r1, r5
 800163c:	f7ff f9c8 	bl	80009d0 <__aeabi_dmul>
 8001640:	0002      	movs	r2, r0
 8001642:	000b      	movs	r3, r1
 8001644:	0010      	movs	r0, r2
 8001646:	0019      	movs	r1, r3
 8001648:	2200      	movs	r2, #0
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <main+0x160>)
 800164c:	f7ff f9c0 	bl	80009d0 <__aeabi_dmul>
 8001650:	0002      	movs	r2, r0
 8001652:	000b      	movs	r3, r1
 8001654:	0010      	movs	r0, r2
 8001656:	0019      	movs	r1, r3
 8001658:	f7ff fc6e 	bl	8000f38 <__aeabi_d2f>
 800165c:	1c02      	adds	r2, r0, #0
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <main+0x164>)
 8001660:	601a      	str	r2, [r3, #0]
		  		CAN_Send_Data(distance);
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <main+0x164>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1c18      	adds	r0, r3, #0
 8001668:	f7ff fec2 	bl	80013f0 <CAN_Send_Data>
		  		//5. Print to UART terminal for debugging
		  		//sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
		  	//	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
		  		CAN_RX();
 800166c:	f7ff feec 	bl	8001448 <CAN_RX>
		  		HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f000 fa3b 	bl	8001aec <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001676:	e77b      	b.n	8001570 <main+0x40>
 8001678:	20000034 	.word	0x20000034
 800167c:	2000005c 	.word	0x2000005c
 8001680:	20000030 	.word	0x20000030
 8001684:	66666666 	.word	0x66666666
 8001688:	40066666 	.word	0x40066666
 800168c:	3c8c7e28 	.word	0x3c8c7e28
 8001690:	3ffc0000 	.word	0x3ffc0000
 8001694:	200000c8 	.word	0x200000c8

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b093      	sub	sp, #76	; 0x4c
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	2414      	movs	r4, #20
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	0018      	movs	r0, r3
 80016a4:	2334      	movs	r3, #52	; 0x34
 80016a6:	001a      	movs	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	f002 faa1 	bl	8003bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	0018      	movs	r0, r3
 80016b2:	2310      	movs	r3, #16
 80016b4:	001a      	movs	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f002 fa9a 	bl	8003bf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	2220      	movs	r2, #32
 80016c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	2201      	movs	r2, #1
 80016c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	0018      	movs	r0, r3
 80016d2:	f001 f8fb 	bl	80028cc <HAL_RCC_OscConfig>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016da:	f000 f84f 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2203      	movs	r2, #3
 80016e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2101      	movs	r1, #1
 80016fa:	0018      	movs	r0, r3
 80016fc:	f001 fc6c 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8001700:	1e03      	subs	r3, r0, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001704:	f000 f83a 	bl	800177c <Error_Handler>
  }
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b013      	add	sp, #76	; 0x4c
 800170e:	bd90      	pop	{r4, r7, pc}

08001710 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d801      	bhi.n	8001722 <usDelay+0x12>
 800171e:	2302      	movs	r3, #2
 8001720:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	3a01      	subs	r2, #1
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	05db      	lsls	r3, r3, #23
 8001730:	2201      	movs	r2, #1
 8001732:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	05db      	lsls	r3, r3, #23
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	2101      	movs	r1, #1
 8001740:	438a      	bics	r2, r1
 8001742:	611a      	str	r2, [r3, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	05db      	lsls	r3, r3, #23
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	2101      	movs	r1, #1
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
	while((usTIM->SR&0x0001) != 1);
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	05db      	lsls	r3, r3, #23
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	2b01      	cmp	r3, #1
 8001762:	d1f8      	bne.n	8001756 <usDelay+0x46>
	usTIM->SR &= ~(0x0001);
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	05db      	lsls	r3, r3, #23
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	2101      	movs	r1, #1
 8001770:	438a      	bics	r2, r1
 8001772:	611a      	str	r2, [r3, #16]
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_MspInit+0x50>)
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_MspInit+0x50>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	619a      	str	r2, [r3, #24]
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_MspInit+0x50>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_MspInit+0x50>)
 80017a8:	69da      	ldr	r2, [r3, #28]
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_MspInit+0x50>)
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	0549      	lsls	r1, r1, #21
 80017b0:	430a      	orrs	r2, r1
 80017b2:	61da      	str	r2, [r3, #28]
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_MspInit+0x50>)
 80017b6:	69da      	ldr	r2, [r3, #28]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	055b      	lsls	r3, r3, #21
 80017bc:	4013      	ands	r3, r2
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_MspInit+0x54>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_MspInit+0x54>)
 80017c8:	2110      	movs	r1, #16
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 f956 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181e:	2318      	movs	r3, #24
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	0018      	movs	r0, r3
 8001824:	2310      	movs	r3, #16
 8001826:	001a      	movs	r2, r3
 8001828:	2100      	movs	r1, #0
 800182a:	f002 f9e1 	bl	8003bf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	2310      	movs	r3, #16
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	0018      	movs	r0, r3
 8001834:	2308      	movs	r3, #8
 8001836:	001a      	movs	r2, r3
 8001838:	2100      	movs	r1, #0
 800183a:	f002 f9d9 	bl	8003bf0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800183e:	003b      	movs	r3, r7
 8001840:	0018      	movs	r0, r3
 8001842:	2310      	movs	r3, #16
 8001844:	001a      	movs	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	f002 f9d2 	bl	8003bf0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <MX_TIM2_Init+0xf0>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	05d2      	lsls	r2, r2, #23
 8001852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <MX_TIM2_Init+0xf0>)
 8001856:	222f      	movs	r2, #47	; 0x2f
 8001858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <MX_TIM2_Init+0xf0>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <MX_TIM2_Init+0xf0>)
 8001862:	2201      	movs	r2, #1
 8001864:	4252      	negs	r2, r2
 8001866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_TIM2_Init+0xf0>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <MX_TIM2_Init+0xf0>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <MX_TIM2_Init+0xf0>)
 8001876:	0018      	movs	r0, r3
 8001878:	f001 fd08 	bl	800328c <HAL_TIM_Base_Init>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001880:	f7ff ff7c 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	2118      	movs	r1, #24
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0152      	lsls	r2, r2, #5
 800188c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188e:	187a      	adds	r2, r7, r1
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_TIM2_Init+0xf0>)
 8001892:	0011      	movs	r1, r2
 8001894:	0018      	movs	r0, r3
 8001896:	f001 fe37 	bl	8003508 <HAL_TIM_ConfigClockSource>
 800189a:	1e03      	subs	r3, r0, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800189e:	f7ff ff6d 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <MX_TIM2_Init+0xf0>)
 80018a4:	0018      	movs	r0, r3
 80018a6:	f001 fd41 	bl	800332c <HAL_TIM_IC_Init>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80018ae:	f7ff ff65 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2110      	movs	r1, #16
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c0:	187a      	adds	r2, r7, r1
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_TIM2_Init+0xf0>)
 80018c4:	0011      	movs	r1, r2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f002 f916 	bl	8003af8 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	1e03      	subs	r3, r0, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80018d0:	f7ff ff54 	bl	800177c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018d4:	003b      	movs	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018da:	003b      	movs	r3, r7
 80018dc:	2201      	movs	r2, #1
 80018de:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018e0:	003b      	movs	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80018e6:	003b      	movs	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018ec:	0039      	movs	r1, r7
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_TIM2_Init+0xf0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	0018      	movs	r0, r3
 80018f4:	f001 fd72 	bl	80033dc <HAL_TIM_IC_ConfigChannel>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80018fc:	f7ff ff3e 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b00a      	add	sp, #40	; 0x28
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200000dc 	.word	0x200000dc

0800190c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	2414      	movs	r4, #20
 8001916:	193b      	adds	r3, r7, r4
 8001918:	0018      	movs	r0, r3
 800191a:	2314      	movs	r3, #20
 800191c:	001a      	movs	r2, r3
 800191e:	2100      	movs	r1, #0
 8001920:	f002 f966 	bl	8003bf0 <memset>
  if(tim_baseHandle->Instance==TIM2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	05db      	lsls	r3, r3, #23
 800192c:	429a      	cmp	r2, r3
 800192e:	d130      	bne.n	8001992 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001936:	2101      	movs	r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	61da      	str	r2, [r3, #28]
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	0289      	lsls	r1, r1, #10
 8001952:	430a      	orrs	r2, r1
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_TIM_Base_MspInit+0x90>)
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	029b      	lsls	r3, r3, #10
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001964:	0021      	movs	r1, r4
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2202      	movs	r2, #2
 8001970:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2202      	movs	r2, #2
 8001982:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	187a      	adds	r2, r7, r1
 8001986:	2390      	movs	r3, #144	; 0x90
 8001988:	05db      	lsls	r3, r3, #23
 800198a:	0011      	movs	r1, r2
 800198c:	0018      	movs	r0, r3
 800198e:	f000 fddf 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b00b      	add	sp, #44	; 0x2c
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40021000 	.word	0x40021000

080019a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80019a4:	4813      	ldr	r0, [pc, #76]	; (80019f4 <LoopForever+0x6>)
    LDR R1, [R0]
 80019a6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80019a8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <LoopForever+0xa>)
    CMP R1, R2
 80019ac:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80019ae:	d105      	bne.n	80019bc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80019b0:	4812      	ldr	r0, [pc, #72]	; (80019fc <LoopForever+0xe>)
    LDR R1,=0x00000001
 80019b2:	4913      	ldr	r1, [pc, #76]	; (8001a00 <LoopForever+0x12>)
    STR R1, [R0]
 80019b4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80019b6:	4813      	ldr	r0, [pc, #76]	; (8001a04 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80019b8:	4913      	ldr	r1, [pc, #76]	; (8001a08 <LoopForever+0x1a>)
    STR R1, [R0]
 80019ba:	6001      	str	r1, [r0, #0]

080019bc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <LoopForever+0x1e>)
  ldr r1, =_edata
 80019be:	4914      	ldr	r1, [pc, #80]	; (8001a10 <LoopForever+0x22>)
  ldr r2, =_sidata
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <LoopForever+0x26>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80019d4:	4c11      	ldr	r4, [pc, #68]	; (8001a1c <LoopForever+0x2e>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019e2:	f7ff ff14 	bl	800180e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019e6:	f002 f8df 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ea:	f7ff fda1 	bl	8001530 <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   r0, =_estack
 80019f0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80019f4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80019f8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80019fc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001a00:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001a04:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001a08:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a14:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 8001a18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a1c:	20000128 	.word	0x20000128

08001a20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC1_IRQHandler>
	...

08001a24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_Init+0x24>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_Init+0x24>)
 8001a2e:	2110      	movs	r1, #16
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f809 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3a:	f7ff fea5 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a56:	681c      	ldr	r4, [r3, #0]
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_InitTick+0x60>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	23fa      	movs	r3, #250	; 0xfa
 8001a60:	0098      	lsls	r0, r3, #2
 8001a62:	f7fe fb51 	bl	8000108 <__udivsi3>
 8001a66:	0003      	movs	r3, r0
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f7fe fb4c 	bl	8000108 <__udivsi3>
 8001a70:	0003      	movs	r3, r0
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fd5f 	bl	8002536 <HAL_SYSTICK_Config>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e00f      	b.n	8001aa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d80b      	bhi.n	8001a9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 fd3c 	bl	800250c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_InitTick+0x64>)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b003      	add	sp, #12
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x1c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	001a      	movs	r2, r3
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	18d2      	adds	r2, r2, r3
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_IncTick+0x20>)
 8001ac6:	601a      	str	r2, [r3, #0]
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000124 	.word	0x20000124

08001ad8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_GetTick+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	20000124 	.word	0x20000124

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3301      	adds	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	189b      	adds	r3, r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	f7ff ffe0 	bl	8001ad8 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	20000008 	.word	0x20000008

08001b34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0f0      	b.n	8001d28 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	5c9b      	ldrb	r3, [r3, r2]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff fbc5 	bl	80012e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2102      	movs	r1, #2
 8001b66:	438a      	bics	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6a:	f7ff ffb5 	bl	8001ad8 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b72:	e013      	b.n	8001b9c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b74:	f7ff ffb0 	bl	8001ad8 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b0a      	cmp	r3, #10
 8001b80:	d90c      	bls.n	8001b9c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	0292      	lsls	r2, r2, #10
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	2105      	movs	r1, #5
 8001b96:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0c5      	b.n	8001d28 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d1e5      	bne.n	8001b74 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff ff8e 	bl	8001ad8 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bc0:	e013      	b.n	8001bea <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc2:	f7ff ff89 	bl	8001ad8 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b0a      	cmp	r3, #10
 8001bce:	d90c      	bls.n	8001bea <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	0292      	lsls	r2, r2, #10
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	2105      	movs	r1, #5
 8001be4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e09e      	b.n	8001d28 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d0e5      	beq.n	8001bc2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e1b      	ldrb	r3, [r3, #24]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e007      	b.n	8001c20 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	438a      	bics	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e5b      	ldrb	r3, [r3, #25]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e007      	b.n	8001c4a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2140      	movs	r1, #64	; 0x40
 8001c46:	438a      	bics	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7e9b      	ldrb	r3, [r3, #26]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2120      	movs	r1, #32
 8001c70:	438a      	bics	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7edb      	ldrb	r3, [r3, #27]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2110      	movs	r1, #16
 8001c88:	438a      	bics	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e007      	b.n	8001c9e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2110      	movs	r1, #16
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7f1b      	ldrb	r3, [r3, #28]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2108      	movs	r1, #8
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e007      	b.n	8001cc8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2108      	movs	r1, #8
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7f5b      	ldrb	r3, [r3, #29]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2104      	movs	r1, #4
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e007      	b.n	8001cf2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2104      	movs	r1, #4
 8001cee:	438a      	bics	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	0011      	movs	r1, r2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2220      	movs	r2, #32
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d40:	2013      	movs	r0, #19
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	2120      	movs	r1, #32
 8001d48:	5c52      	ldrb	r2, [r2, r1]
 8001d4a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	18bb      	adds	r3, r7, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d004      	beq.n	8001d60 <HAL_CAN_ConfigFilter+0x30>
 8001d56:	18bb      	adds	r3, r7, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d000      	beq.n	8001d60 <HAL_CAN_ConfigFilter+0x30>
 8001d5e:	e0cd      	b.n	8001efc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	58d3      	ldr	r3, [r2, r3]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	0011      	movs	r1, r2
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	221f      	movs	r2, #31
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	2387      	movs	r3, #135	; 0x87
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	58d3      	ldr	r3, [r2, r3]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	43d2      	mvns	r2, r2
 8001d92:	401a      	ands	r2, r3
 8001d94:	0011      	movs	r1, r2
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	2387      	movs	r3, #135	; 0x87
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d129      	bne.n	8001dfa <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	2383      	movs	r3, #131	; 0x83
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	58d3      	ldr	r3, [r2, r3]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	43d2      	mvns	r2, r2
 8001db2:	401a      	ands	r2, r3
 8001db4:	0011      	movs	r1, r2
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	2383      	movs	r3, #131	; 0x83
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dd0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3248      	adds	r2, #72	; 0x48
 8001dd6:	00d2      	lsls	r2, r2, #3
 8001dd8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	3348      	adds	r3, #72	; 0x48
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	18cb      	adds	r3, r1, r3
 8001df6:	3304      	adds	r3, #4
 8001df8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d128      	bne.n	8001e54 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	2383      	movs	r3, #131	; 0x83
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	58d2      	ldr	r2, [r2, r3]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	0011      	movs	r1, r2
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	2383      	movs	r3, #131	; 0x83
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e2a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3248      	adds	r2, #72	; 0x48
 8001e30:	00d2      	lsls	r2, r2, #3
 8001e32:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	3348      	adds	r3, #72	; 0x48
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	18cb      	adds	r3, r1, r3
 8001e50:	3304      	adds	r3, #4
 8001e52:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10c      	bne.n	8001e76 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	2381      	movs	r3, #129	; 0x81
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	58d3      	ldr	r3, [r2, r3]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	43d2      	mvns	r2, r2
 8001e68:	401a      	ands	r2, r3
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	2381      	movs	r3, #129	; 0x81
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	50d1      	str	r1, [r2, r3]
 8001e74:	e00a      	b.n	8001e8c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	2381      	movs	r3, #129	; 0x81
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	58d2      	ldr	r2, [r2, r3]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	0011      	movs	r1, r2
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	2381      	movs	r3, #129	; 0x81
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10c      	bne.n	8001eae <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	2385      	movs	r3, #133	; 0x85
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	58d3      	ldr	r3, [r2, r3]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	43d2      	mvns	r2, r2
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	2385      	movs	r3, #133	; 0x85
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	50d1      	str	r1, [r2, r3]
 8001eac:	e00a      	b.n	8001ec4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	2385      	movs	r3, #133	; 0x85
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	58d2      	ldr	r2, [r2, r3]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	0011      	movs	r1, r2
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	2385      	movs	r3, #133	; 0x85
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10a      	bne.n	8001ee2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	2387      	movs	r3, #135	; 0x87
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	58d2      	ldr	r2, [r2, r3]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	0011      	movs	r1, r2
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	2387      	movs	r3, #135	; 0x87
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	58d3      	ldr	r3, [r2, r3]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4393      	bics	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e007      	b.n	8001f0c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	02d2      	lsls	r2, r2, #11
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
  }
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b006      	add	sp, #24
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d12f      	bne.n	8001f88 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	438a      	bics	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff fdca 	bl	8001ad8 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f48:	e013      	b.n	8001f72 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f4a:	f7ff fdc5 	bl	8001ad8 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b0a      	cmp	r3, #10
 8001f56:	d90c      	bls.n	8001f72 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0292      	lsls	r2, r2, #10
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	2105      	movs	r1, #5
 8001f6c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e012      	b.n	8001f98 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1e5      	bne.n	8001f4a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e007      	b.n	8001f98 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0312      	lsls	r2, r2, #12
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
  }
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fae:	201f      	movs	r0, #31
 8001fb0:	183b      	adds	r3, r7, r0
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	5c52      	ldrb	r2, [r2, r1]
 8001fb8:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fc2:	183b      	adds	r3, r7, r0
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d004      	beq.n	8001fd4 <HAL_CAN_AddTxMessage+0x34>
 8001fca:	183b      	adds	r3, r7, r0
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d000      	beq.n	8001fd4 <HAL_CAN_AddTxMessage+0x34>
 8001fd2:	e0b7      	b.n	8002144 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	04db      	lsls	r3, r3, #19
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	051b      	lsls	r3, r3, #20
 8001fe4:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fe6:	d105      	bne.n	8001ff4 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	055b      	lsls	r3, r3, #21
 8001fee:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ff0:	d100      	bne.n	8001ff4 <HAL_CAN_AddTxMessage+0x54>
 8001ff2:	e09e      	b.n	8002132 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	0e1b      	lsrs	r3, r3, #24
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d908      	bls.n	8002016 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	0412      	lsls	r2, r2, #16
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e09e      	b.n	8002154 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002016:	2201      	movs	r2, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10c      	bne.n	8002042 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4311      	orrs	r1, r2
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	3218      	adds	r2, #24
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	50d1      	str	r1, [r2, r3]
 8002040:	e00f      	b.n	8002062 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800204c:	431a      	orrs	r2, r3
 800204e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002058:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	3218      	adds	r2, #24
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3318      	adds	r3, #24
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	18cb      	adds	r3, r1, r3
 8002072:	3304      	adds	r3, #4
 8002074:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	7d1b      	ldrb	r3, [r3, #20]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d112      	bne.n	80020a4 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3318      	adds	r3, #24
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	18d3      	adds	r3, r2, r3
 800208a:	3304      	adds	r3, #4
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6819      	ldr	r1, [r3, #0]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3318      	adds	r3, #24
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	18cb      	adds	r3, r1, r3
 80020a0:	3304      	adds	r3, #4
 80020a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3307      	adds	r3, #7
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	061a      	lsls	r2, r3, #24
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3306      	adds	r3, #6
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	041b      	lsls	r3, r3, #16
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3305      	adds	r3, #5
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	0019      	movs	r1, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	6979      	ldr	r1, [r7, #20]
 80020d0:	23c6      	movs	r3, #198	; 0xc6
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	0109      	lsls	r1, r1, #4
 80020d6:	1841      	adds	r1, r0, r1
 80020d8:	18cb      	adds	r3, r1, r3
 80020da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3303      	adds	r3, #3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	061a      	lsls	r2, r3, #24
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3302      	adds	r3, #2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	0019      	movs	r1, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	6979      	ldr	r1, [r7, #20]
 8002106:	23c4      	movs	r3, #196	; 0xc4
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	0109      	lsls	r1, r1, #4
 800210c:	1841      	adds	r1, r0, r1
 800210e:	18cb      	adds	r3, r1, r3
 8002110:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	3218      	adds	r2, #24
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	58d2      	ldr	r2, [r2, r3]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2101      	movs	r1, #1
 8002124:	4311      	orrs	r1, r2
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	3218      	adds	r2, #24
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e010      	b.n	8002154 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	0392      	lsls	r2, r2, #14
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	02d2      	lsls	r2, r2, #11
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
  }
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b008      	add	sp, #32
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800216a:	2017      	movs	r0, #23
 800216c:	183b      	adds	r3, r7, r0
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	2120      	movs	r1, #32
 8002172:	5c52      	ldrb	r2, [r2, r1]
 8002174:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002176:	0002      	movs	r2, r0
 8002178:	18bb      	adds	r3, r7, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d004      	beq.n	800218a <HAL_CAN_GetRxMessage+0x2e>
 8002180:	18bb      	adds	r3, r7, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d000      	beq.n	800218a <HAL_CAN_GetRxMessage+0x2e>
 8002188:	e0f8      	b.n	800237c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10e      	bne.n	80021ae <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2203      	movs	r2, #3
 8002198:	4013      	ands	r3, r2
 800219a:	d117      	bne.n	80021cc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	0392      	lsls	r2, r2, #14
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0ee      	b.n	800238c <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4013      	ands	r3, r2
 80021b8:	d108      	bne.n	80021cc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	0392      	lsls	r2, r2, #14
 80021c2:	431a      	orrs	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0df      	b.n	800238c <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	321b      	adds	r2, #27
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	58d3      	ldr	r3, [r2, r3]
 80021d8:	2204      	movs	r2, #4
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10b      	bne.n	8002200 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	321b      	adds	r2, #27
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	58d3      	ldr	r3, [r2, r3]
 80021f4:	0d5b      	lsrs	r3, r3, #21
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	0d5a      	lsrs	r2, r3, #21
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e00a      	b.n	8002216 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	321b      	adds	r2, #27
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	58d3      	ldr	r3, [r2, r3]
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	321b      	adds	r2, #27
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	58d3      	ldr	r3, [r2, r3]
 8002222:	2202      	movs	r2, #2
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	331b      	adds	r3, #27
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	3304      	adds	r3, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	220f      	movs	r2, #15
 800223c:	401a      	ands	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	331b      	adds	r3, #27
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	18d3      	adds	r3, r2, r3
 800224e:	3304      	adds	r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	331b      	adds	r3, #27
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	18d3      	adds	r3, r2, r3
 8002268:	3304      	adds	r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	0c1a      	lsrs	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	23dc      	movs	r3, #220	; 0xdc
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	188a      	adds	r2, r1, r2
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	23dc      	movs	r3, #220	; 0xdc
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	188a      	adds	r2, r1, r2
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0a1a      	lsrs	r2, r3, #8
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	23dc      	movs	r3, #220	; 0xdc
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	188a      	adds	r2, r1, r2
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0c1a      	lsrs	r2, r3, #16
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	3302      	adds	r3, #2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	23dc      	movs	r3, #220	; 0xdc
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	188a      	adds	r2, r1, r2
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e1a      	lsrs	r2, r3, #24
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	3303      	adds	r3, #3
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	23de      	movs	r3, #222	; 0xde
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	188a      	adds	r2, r1, r2
 80022f0:	18d3      	adds	r3, r2, r3
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	3304      	adds	r3, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	23de      	movs	r3, #222	; 0xde
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	188a      	adds	r2, r1, r2
 800230a:	18d3      	adds	r3, r2, r3
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0a1a      	lsrs	r2, r3, #8
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	3305      	adds	r3, #5
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	23de      	movs	r3, #222	; 0xde
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	188a      	adds	r2, r1, r2
 8002326:	18d3      	adds	r3, r2, r3
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0c1a      	lsrs	r2, r3, #16
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	3306      	adds	r3, #6
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	23de      	movs	r3, #222	; 0xde
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	188a      	adds	r2, r1, r2
 8002342:	18d3      	adds	r3, r2, r3
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0e1a      	lsrs	r2, r3, #24
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	3307      	adds	r3, #7
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2120      	movs	r1, #32
 8002362:	430a      	orrs	r2, r1
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	e007      	b.n	8002378 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2120      	movs	r1, #32
 8002374:	430a      	orrs	r2, r1
 8002376:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e007      	b.n	800238c <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	02d2      	lsls	r2, r2, #11
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
  }
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b006      	add	sp, #24
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800239e:	200f      	movs	r0, #15
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	2120      	movs	r1, #32
 80023a6:	5c52      	ldrb	r2, [r2, r1]
 80023a8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023aa:	0002      	movs	r2, r0
 80023ac:	18bb      	adds	r3, r7, r2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d003      	beq.n	80023bc <HAL_CAN_ActivateNotification+0x28>
 80023b4:	18bb      	adds	r3, r7, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d109      	bne.n	80023d0 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6959      	ldr	r1, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e007      	b.n	80023e0 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	02d2      	lsls	r2, r2, #11
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
  }
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	0002      	movs	r2, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b7f      	cmp	r3, #127	; 0x7f
 80023fc:	d828      	bhi.n	8002450 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023fe:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <__NVIC_SetPriority+0xd4>)
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b25b      	sxtb	r3, r3
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	33c0      	adds	r3, #192	; 0xc0
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	589b      	ldr	r3, [r3, r2]
 800240e:	1dfa      	adds	r2, r7, #7
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	0011      	movs	r1, r2
 8002414:	2203      	movs	r2, #3
 8002416:	400a      	ands	r2, r1
 8002418:	00d2      	lsls	r2, r2, #3
 800241a:	21ff      	movs	r1, #255	; 0xff
 800241c:	4091      	lsls	r1, r2
 800241e:	000a      	movs	r2, r1
 8002420:	43d2      	mvns	r2, r2
 8002422:	401a      	ands	r2, r3
 8002424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	401a      	ands	r2, r3
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	0018      	movs	r0, r3
 8002434:	2303      	movs	r3, #3
 8002436:	4003      	ands	r3, r0
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800243c:	481f      	ldr	r0, [pc, #124]	; (80024bc <__NVIC_SetPriority+0xd4>)
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b25b      	sxtb	r3, r3
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	430a      	orrs	r2, r1
 8002448:	33c0      	adds	r3, #192	; 0xc0
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800244e:	e031      	b.n	80024b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <__NVIC_SetPriority+0xd8>)
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	0019      	movs	r1, r3
 8002458:	230f      	movs	r3, #15
 800245a:	400b      	ands	r3, r1
 800245c:	3b08      	subs	r3, #8
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3306      	adds	r3, #6
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	3304      	adds	r3, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1dfa      	adds	r2, r7, #7
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	0011      	movs	r1, r2
 8002470:	2203      	movs	r2, #3
 8002472:	400a      	ands	r2, r1
 8002474:	00d2      	lsls	r2, r2, #3
 8002476:	21ff      	movs	r1, #255	; 0xff
 8002478:	4091      	lsls	r1, r2
 800247a:	000a      	movs	r2, r1
 800247c:	43d2      	mvns	r2, r2
 800247e:	401a      	ands	r2, r3
 8002480:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	22ff      	movs	r2, #255	; 0xff
 8002488:	401a      	ands	r2, r3
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	0018      	movs	r0, r3
 8002490:	2303      	movs	r3, #3
 8002492:	4003      	ands	r3, r0
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002498:	4809      	ldr	r0, [pc, #36]	; (80024c0 <__NVIC_SetPriority+0xd8>)
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	001c      	movs	r4, r3
 80024a0:	230f      	movs	r3, #15
 80024a2:	4023      	ands	r3, r4
 80024a4:	3b08      	subs	r3, #8
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	430a      	orrs	r2, r1
 80024aa:	3306      	adds	r3, #6
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	18c3      	adds	r3, r0, r3
 80024b0:	3304      	adds	r3, #4
 80024b2:	601a      	str	r2, [r3, #0]
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b003      	add	sp, #12
 80024ba:	bd90      	pop	{r4, r7, pc}
 80024bc:	e000e100 	.word	0xe000e100
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1e5a      	subs	r2, r3, #1
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	045b      	lsls	r3, r3, #17
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d301      	bcc.n	80024dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d8:	2301      	movs	r3, #1
 80024da:	e010      	b.n	80024fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <SysTick_Config+0x44>)
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	3a01      	subs	r2, #1
 80024e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e4:	2301      	movs	r3, #1
 80024e6:	425b      	negs	r3, r3
 80024e8:	2103      	movs	r1, #3
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7ff ff7c 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x44>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x44>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	210f      	movs	r1, #15
 8002518:	187b      	adds	r3, r7, r1
 800251a:	1c02      	adds	r2, r0, #0
 800251c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	187b      	adds	r3, r7, r1
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b25b      	sxtb	r3, r3
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff ff5d 	bl	80023e8 <__NVIC_SetPriority>
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff ffbf 	bl	80024c4 <SysTick_Config>
 8002546:	0003      	movs	r3, r0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	e149      	b.n	80027f4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4091      	lsls	r1, r2
 800256a:	000a      	movs	r2, r1
 800256c:	4013      	ands	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d100      	bne.n	8002578 <HAL_GPIO_Init+0x28>
 8002576:	e13a      	b.n	80027ee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d00b      	beq.n	8002598 <HAL_GPIO_Init+0x48>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d007      	beq.n	8002598 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800258c:	2b11      	cmp	r3, #17
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b12      	cmp	r3, #18
 8002596:	d130      	bne.n	80025fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	409a      	lsls	r2, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	43da      	mvns	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	0013      	movs	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ce:	2201      	movs	r2, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	43da      	mvns	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	2201      	movs	r2, #1
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
 80025ec:	0013      	movs	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	43da      	mvns	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	0013      	movs	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0xea>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b12      	cmp	r3, #18
 8002638:	d123      	bne.n	8002682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	08da      	lsrs	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3208      	adds	r2, #8
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	58d3      	ldr	r3, [r2, r3]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2207      	movs	r2, #7
 800264c:	4013      	ands	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	409a      	lsls	r2, r3
 8002654:	0013      	movs	r3, r2
 8002656:	43da      	mvns	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2107      	movs	r1, #7
 8002666:	400b      	ands	r3, r1
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	6939      	ldr	r1, [r7, #16]
 8002680:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	409a      	lsls	r2, r3
 8002690:	0013      	movs	r3, r2
 8002692:	43da      	mvns	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2203      	movs	r2, #3
 80026a0:	401a      	ands	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	055b      	lsls	r3, r3, #21
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_GPIO_Init+0x174>
 80026c2:	e094      	b.n	80027ee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c4:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_GPIO_Init+0x2bc>)
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_GPIO_Init+0x2bc>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	430a      	orrs	r2, r1
 80026ce:	619a      	str	r2, [r3, #24]
 80026d0:	4b4e      	ldr	r3, [pc, #312]	; (800280c <HAL_GPIO_Init+0x2bc>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2201      	movs	r2, #1
 80026d6:	4013      	ands	r3, r2
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026dc:	4a4c      	ldr	r2, [pc, #304]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	589b      	ldr	r3, [r3, r2]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2203      	movs	r2, #3
 80026ee:	4013      	ands	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	409a      	lsls	r2, r3
 80026f6:	0013      	movs	r3, r2
 80026f8:	43da      	mvns	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	2390      	movs	r3, #144	; 0x90
 8002704:	05db      	lsls	r3, r3, #23
 8002706:	429a      	cmp	r2, r3
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x1d6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a41      	ldr	r2, [pc, #260]	; (8002814 <HAL_GPIO_Init+0x2c4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x1d2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a40      	ldr	r2, [pc, #256]	; (8002818 <HAL_GPIO_Init+0x2c8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x1ce>
 800271a:	2302      	movs	r3, #2
 800271c:	e004      	b.n	8002728 <HAL_GPIO_Init+0x1d8>
 800271e:	2305      	movs	r3, #5
 8002720:	e002      	b.n	8002728 <HAL_GPIO_Init+0x1d8>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x1d8>
 8002726:	2300      	movs	r3, #0
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	2103      	movs	r1, #3
 800272c:	400a      	ands	r2, r1
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	4093      	lsls	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002738:	4935      	ldr	r1, [pc, #212]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_GPIO_Init+0x2cc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	025b      	lsls	r3, r3, #9
 800275e:	4013      	ands	r3, r2
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <HAL_GPIO_Init+0x2cc>)
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002770:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_GPIO_Init+0x2cc>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43da      	mvns	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	029b      	lsls	r3, r3, #10
 8002788:	4013      	ands	r3, r2
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_GPIO_Init+0x2cc>)
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_GPIO_Init+0x2cc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	035b      	lsls	r3, r3, #13
 80027b2:	4013      	ands	r3, r2
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_GPIO_Init+0x2cc>)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_GPIO_Init+0x2cc>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	039b      	lsls	r3, r3, #14
 80027dc:	4013      	ands	r3, r2
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_GPIO_Init+0x2cc>)
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	40da      	lsrs	r2, r3
 80027fc:	1e13      	subs	r3, r2, #0
 80027fe:	d000      	beq.n	8002802 <HAL_GPIO_Init+0x2b2>
 8002800:	e6ae      	b.n	8002560 <HAL_GPIO_Init+0x10>
  } 
}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	40010000 	.word	0x40010000
 8002814:	48000400 	.word	0x48000400
 8002818:	48000800 	.word	0x48000800
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	000a      	movs	r2, r1
 800282a:	1cbb      	adds	r3, r7, #2
 800282c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	1cba      	adds	r2, r7, #2
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	4013      	ands	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800283a:	230f      	movs	r3, #15
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e003      	b.n	800284c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002844:	230f      	movs	r3, #15
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800284c:	230f      	movs	r3, #15
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	781b      	ldrb	r3, [r3, #0]
  }
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b004      	add	sp, #16
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	0008      	movs	r0, r1
 8002864:	0011      	movs	r1, r2
 8002866:	1cbb      	adds	r3, r7, #2
 8002868:	1c02      	adds	r2, r0, #0
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	1c7b      	adds	r3, r7, #1
 800286e:	1c0a      	adds	r2, r1, #0
 8002870:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002872:	1c7b      	adds	r3, r7, #1
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800287a:	1cbb      	adds	r3, r7, #2
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002882:	e003      	b.n	800288c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002884:	1cbb      	adds	r3, r7, #2
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	000a      	movs	r2, r1
 800289e:	1cbb      	adds	r3, r7, #2
 80028a0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a8:	1cbb      	adds	r3, r7, #2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4013      	ands	r3, r2
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	1cb9      	adds	r1, r7, #2
 80028b8:	8809      	ldrh	r1, [r1, #0]
 80028ba:	400b      	ands	r3, r1
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f000 fb76 	bl	8002fcc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	d100      	bne.n	80028ec <HAL_RCC_OscConfig+0x20>
 80028ea:	e08e      	b.n	8002a0a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028ec:	4bc5      	ldr	r3, [pc, #788]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	220c      	movs	r2, #12
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d00e      	beq.n	8002916 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f8:	4bc2      	ldr	r3, [pc, #776]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	220c      	movs	r2, #12
 80028fe:	4013      	ands	r3, r2
 8002900:	2b08      	cmp	r3, #8
 8002902:	d117      	bne.n	8002934 <HAL_RCC_OscConfig+0x68>
 8002904:	4bbf      	ldr	r3, [pc, #764]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	23c0      	movs	r3, #192	; 0xc0
 800290a:	025b      	lsls	r3, r3, #9
 800290c:	401a      	ands	r2, r3
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	025b      	lsls	r3, r3, #9
 8002912:	429a      	cmp	r2, r3
 8002914:	d10e      	bne.n	8002934 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002916:	4bbb      	ldr	r3, [pc, #748]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	4013      	ands	r3, r2
 8002920:	d100      	bne.n	8002924 <HAL_RCC_OscConfig+0x58>
 8002922:	e071      	b.n	8002a08 <HAL_RCC_OscConfig+0x13c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d000      	beq.n	800292e <HAL_RCC_OscConfig+0x62>
 800292c:	e06c      	b.n	8002a08 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f000 fb4c 	bl	8002fcc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x80>
 800293c:	4bb1      	ldr	r3, [pc, #708]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4bb0      	ldr	r3, [pc, #704]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	0249      	lsls	r1, r1, #9
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e02f      	b.n	80029ac <HAL_RCC_OscConfig+0xe0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0xa2>
 8002954:	4bab      	ldr	r3, [pc, #684]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4baa      	ldr	r3, [pc, #680]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 800295a:	49ab      	ldr	r1, [pc, #684]	; (8002c08 <HAL_RCC_OscConfig+0x33c>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	4ba8      	ldr	r3, [pc, #672]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4ba7      	ldr	r3, [pc, #668]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002966:	49a9      	ldr	r1, [pc, #676]	; (8002c0c <HAL_RCC_OscConfig+0x340>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e01e      	b.n	80029ac <HAL_RCC_OscConfig+0xe0>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10e      	bne.n	8002994 <HAL_RCC_OscConfig+0xc8>
 8002976:	4ba3      	ldr	r3, [pc, #652]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4ba2      	ldr	r3, [pc, #648]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	02c9      	lsls	r1, r1, #11
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	4b9f      	ldr	r3, [pc, #636]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b9e      	ldr	r3, [pc, #632]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 800298a:	2180      	movs	r1, #128	; 0x80
 800298c:	0249      	lsls	r1, r1, #9
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xe0>
 8002994:	4b9b      	ldr	r3, [pc, #620]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b9a      	ldr	r3, [pc, #616]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 800299a:	499b      	ldr	r1, [pc, #620]	; (8002c08 <HAL_RCC_OscConfig+0x33c>)
 800299c:	400a      	ands	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b98      	ldr	r3, [pc, #608]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b97      	ldr	r3, [pc, #604]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 80029a6:	4999      	ldr	r1, [pc, #612]	; (8002c0c <HAL_RCC_OscConfig+0x340>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff f890 	bl	8001ad8 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029be:	f7ff f88b 	bl	8001ad8 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e2fd      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d0:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	4013      	ands	r3, r2
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0xf2>
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7ff f87b 	bl	8001ad8 <HAL_GetTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7ff f876 	bl	8001ad8 <HAL_GetTick>
 80029ec:	0002      	movs	r2, r0
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e2e8      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	4013      	ands	r3, r2
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x11c>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	4013      	ands	r3, r2
 8002a12:	d100      	bne.n	8002a16 <HAL_RCC_OscConfig+0x14a>
 8002a14:	e06c      	b.n	8002af0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a16:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a20:	4b78      	ldr	r3, [pc, #480]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	220c      	movs	r2, #12
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d11f      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1a0>
 8002a2c:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	23c0      	movs	r3, #192	; 0xc0
 8002a32:	025b      	lsls	r3, r3, #9
 8002a34:	401a      	ands	r2, r3
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d116      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x188>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e2bb      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b6b      	ldr	r3, [pc, #428]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	22f8      	movs	r2, #248	; 0xf8
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00da      	lsls	r2, r3, #3
 8002a64:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	e041      	b.n	8002af0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d024      	beq.n	8002abe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a74:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff f82a 	bl	8001ad8 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7ff f825 	bl	8001ad8 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e297      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d0f1      	beq.n	8002a8a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	22f8      	movs	r2, #248	; 0xf8
 8002aac:	4393      	bics	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	00da      	lsls	r2, r3, #3
 8002ab6:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e018      	b.n	8002af0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002abe:	4b51      	ldr	r3, [pc, #324]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7ff f805 	bl	8001ad8 <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7ff f800 	bl	8001ad8 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e272      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d1f1      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2208      	movs	r2, #8
 8002af6:	4013      	ands	r3, r2
 8002af8:	d036      	beq.n	8002b68 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d019      	beq.n	8002b36 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b08:	2101      	movs	r1, #1
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe ffe3 	bl	8001ad8 <HAL_GetTick>
 8002b12:	0003      	movs	r3, r0
 8002b14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b18:	f7fe ffde 	bl	8001ad8 <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e250      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	2202      	movs	r2, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	d0f1      	beq.n	8002b18 <HAL_RCC_OscConfig+0x24c>
 8002b34:	e018      	b.n	8002b68 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	438a      	bics	r2, r1
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe ffc9 	bl	8001ad8 <HAL_GetTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe ffc4 	bl	8001ad8 <HAL_GetTick>
 8002b50:	0002      	movs	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e236      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	2202      	movs	r2, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	d1f1      	bne.n	8002b4c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d100      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2a8>
 8002b72:	e0b5      	b.n	8002ce0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b74:	201f      	movs	r0, #31
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	055b      	lsls	r3, r3, #21
 8002b84:	4013      	ands	r3, r2
 8002b86:	d110      	bne.n	8002baa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	0549      	lsls	r1, r1, #21
 8002b92:	430a      	orrs	r2, r1
 8002b94:	61da      	str	r2, [r3, #28]
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	055b      	lsls	r3, r3, #21
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ba4:	183b      	adds	r3, r7, r0
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_OscConfig+0x344>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d11a      	bne.n	8002bec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_RCC_OscConfig+0x344>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x344>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	0049      	lsls	r1, r1, #1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc4:	f7fe ff88 	bl	8001ad8 <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe ff83 	bl	8001ad8 <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1f5      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x344>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d10f      	bne.n	8002c14 <HAL_RCC_OscConfig+0x348>
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <HAL_RCC_OscConfig+0x338>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	621a      	str	r2, [r3, #32]
 8002c00:	e036      	b.n	8002c70 <HAL_RCC_OscConfig+0x3a4>
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	fffbffff 	.word	0xfffbffff
 8002c10:	40007000 	.word	0x40007000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x36a>
 8002c1c:	4bca      	ldr	r3, [pc, #808]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	4bc9      	ldr	r3, [pc, #804]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	438a      	bics	r2, r1
 8002c26:	621a      	str	r2, [r3, #32]
 8002c28:	4bc7      	ldr	r3, [pc, #796]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	4bc6      	ldr	r3, [pc, #792]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c2e:	2104      	movs	r1, #4
 8002c30:	438a      	bics	r2, r1
 8002c32:	621a      	str	r2, [r3, #32]
 8002c34:	e01c      	b.n	8002c70 <HAL_RCC_OscConfig+0x3a4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x38c>
 8002c3e:	4bc2      	ldr	r3, [pc, #776]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	4bc1      	ldr	r3, [pc, #772]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c44:	2104      	movs	r1, #4
 8002c46:	430a      	orrs	r2, r1
 8002c48:	621a      	str	r2, [r3, #32]
 8002c4a:	4bbf      	ldr	r3, [pc, #764]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	4bbe      	ldr	r3, [pc, #760]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	621a      	str	r2, [r3, #32]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0x3a4>
 8002c58:	4bbb      	ldr	r3, [pc, #748]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	4bba      	ldr	r3, [pc, #744]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	438a      	bics	r2, r1
 8002c62:	621a      	str	r2, [r3, #32]
 8002c64:	4bb8      	ldr	r3, [pc, #736]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	4bb7      	ldr	r3, [pc, #732]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c6a:	2104      	movs	r1, #4
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d014      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fe ff2e 	bl	8001ad8 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	e009      	b.n	8002c96 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe ff29 	bl	8001ad8 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	4aaf      	ldr	r2, [pc, #700]	; (8002f4c <HAL_RCC_OscConfig+0x680>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e19a      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	4bac      	ldr	r3, [pc, #688]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3b6>
 8002ca0:	e013      	b.n	8002cca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe ff19 	bl	8001ad8 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	e009      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe ff14 	bl	8001ad8 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	4aa5      	ldr	r2, [pc, #660]	; (8002f4c <HAL_RCC_OscConfig+0x680>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e185      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	4ba1      	ldr	r3, [pc, #644]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cca:	231f      	movs	r3, #31
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b9c      	ldr	r3, [pc, #624]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	4b9b      	ldr	r3, [pc, #620]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002cda:	499d      	ldr	r1, [pc, #628]	; (8002f50 <HAL_RCC_OscConfig+0x684>)
 8002cdc:	400a      	ands	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d12a      	bne.n	8002d48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cf2:	4b95      	ldr	r3, [pc, #596]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf6:	4b94      	ldr	r3, [pc, #592]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cfe:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d02:	4b91      	ldr	r3, [pc, #580]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fee5 	bl	8001ad8 <HAL_GetTick>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d14:	f7fe fee0 	bl	8001ad8 <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e152      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d0f1      	beq.n	8002d14 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d30:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	22f8      	movs	r2, #248	; 0xf8
 8002d36:	4393      	bics	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	00da      	lsls	r2, r3, #3
 8002d40:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34
 8002d46:	e034      	b.n	8002db2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	3305      	adds	r3, #5
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d50:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d54:	4b7c      	ldr	r3, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d56:	2104      	movs	r1, #4
 8002d58:	438a      	bics	r2, r1
 8002d5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d5c:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	22f8      	movs	r2, #248	; 0xf8
 8002d62:	4393      	bics	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	00da      	lsls	r2, r3, #3
 8002d6c:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34
 8002d72:	e01e      	b.n	8002db2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d74:	4b74      	ldr	r3, [pc, #464]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d78:	4b73      	ldr	r3, [pc, #460]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d80:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	438a      	bics	r2, r1
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fea4 	bl	8001ad8 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d96:	f7fe fe9f 	bl	8001ad8 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e111      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002da8:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	2202      	movs	r2, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d1f1      	bne.n	8002d96 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	d05c      	beq.n	8002e76 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002dbc:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	220c      	movs	r2, #12
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d00e      	beq.n	8002de6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002dc8:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	220c      	movs	r2, #12
 8002dce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d114      	bne.n	8002dfe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002dd4:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	23c0      	movs	r3, #192	; 0xc0
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	401a      	ands	r2, r3
 8002dde:	23c0      	movs	r3, #192	; 0xc0
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d10b      	bne.n	8002dfe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002de6:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	025b      	lsls	r3, r3, #9
 8002dee:	4013      	ands	r3, r2
 8002df0:	d040      	beq.n	8002e74 <HAL_RCC_OscConfig+0x5a8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d03c      	beq.n	8002e74 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e6      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0a:	4b4f      	ldr	r3, [pc, #316]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0249      	lsls	r1, r1, #9
 8002e10:	430a      	orrs	r2, r1
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fe60 	bl	8001ad8 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e1e:	f7fe fe5b 	bl	8001ad8 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0cd      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e30:	4b45      	ldr	r3, [pc, #276]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	025b      	lsls	r3, r3, #9
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x552>
 8002e3c:	e01b      	b.n	8002e76 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002e3e:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e44:	4943      	ldr	r1, [pc, #268]	; (8002f54 <HAL_RCC_OscConfig+0x688>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fe45 	bl	8001ad8 <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e54:	f7fe fe40 	bl	8001ad8 <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0b2      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	025b      	lsls	r3, r3, #9
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x588>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e74:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d100      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5b4>
 8002e7e:	e0a4      	b.n	8002fca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	220c      	movs	r2, #12
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d100      	bne.n	8002e8e <HAL_RCC_OscConfig+0x5c2>
 8002e8c:	e078      	b.n	8002f80 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d14c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002e9c:	492e      	ldr	r1, [pc, #184]	; (8002f58 <HAL_RCC_OscConfig+0x68c>)
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fe19 	bl	8001ad8 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fe14 	bl	8001ad8 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e086      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	049b      	lsls	r3, r3, #18
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	220f      	movs	r2, #15
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_RCC_OscConfig+0x690>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	0449      	lsls	r1, r1, #17
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe fde7 	bl	8001ad8 <HAL_GetTick>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe fde2 	bl	8001ad8 <HAL_GetTick>
 8002f14:	0002      	movs	r2, r0
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e054      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	049b      	lsls	r3, r3, #18
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x644>
 8002f2e:	e04c      	b.n	8002fca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCC_OscConfig+0x67c>)
 8002f36:	4908      	ldr	r1, [pc, #32]	; (8002f58 <HAL_RCC_OscConfig+0x68c>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fdcc 	bl	8001ad8 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	e015      	b.n	8002f72 <HAL_RCC_OscConfig+0x6a6>
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	00001388 	.word	0x00001388
 8002f50:	efffffff 	.word	0xefffffff
 8002f54:	fffeffff 	.word	0xfffeffff
 8002f58:	feffffff 	.word	0xfeffffff
 8002f5c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fdba 	bl	8001ad8 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e02c      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_RCC_OscConfig+0x708>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	049b      	lsls	r3, r3, #18
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x694>
 8002f7e:	e024      	b.n	8002fca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e01f      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x708>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCC_OscConfig+0x708>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	23c0      	movs	r3, #192	; 0xc0
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	220f      	movs	r2, #15
 8002fac:	401a      	ands	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	23f0      	movs	r3, #240	; 0xf0
 8002fba:	039b      	lsls	r3, r3, #14
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b008      	add	sp, #32
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0bf      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d911      	bls.n	800301e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4393      	bics	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0a6      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2202      	movs	r2, #2
 8003024:	4013      	ands	r3, r2
 8003026:	d015      	beq.n	8003054 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2204      	movs	r2, #4
 800302e:	4013      	ands	r3, r2
 8003030:	d006      	beq.n	8003040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003032:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003038:	21e0      	movs	r1, #224	; 0xe0
 800303a:	00c9      	lsls	r1, r1, #3
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	22f0      	movs	r2, #240	; 0xf0
 8003046:	4393      	bics	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	4013      	ands	r3, r2
 800305c:	d04c      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	029b      	lsls	r3, r3, #10
 800306e:	4013      	ands	r3, r2
 8003070:	d120      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07a      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	049b      	lsls	r3, r3, #18
 8003086:	4013      	ands	r3, r2
 8003088:	d114      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e06e      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	025b      	lsls	r3, r3, #9
 800309e:	4013      	ands	r3, r2
 80030a0:	d108      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e062      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2202      	movs	r2, #2
 80030ac:	4013      	ands	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e05b      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b4:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4393      	bics	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c8:	f7fe fd06 	bl	8001ad8 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d2:	f7fe fd01 	bl	8001ad8 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_RCC_ClockConfig+0x1a4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e042      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	220c      	movs	r2, #12
 80030ec:	401a      	ands	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1ec      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2201      	movs	r2, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d211      	bcs.n	800312a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCC_ClockConfig+0x19c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d001      	beq.n	800312a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e020      	b.n	800316c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2204      	movs	r2, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_RCC_ClockConfig+0x1a8>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003148:	f000 f820 	bl	800318c <HAL_RCC_GetSysClockFreq>
 800314c:	0001      	movs	r1, r0
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x1a0>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	220f      	movs	r2, #15
 8003156:	4013      	ands	r3, r2
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1ac>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	000a      	movs	r2, r1
 800315e:	40da      	lsrs	r2, r3
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1b0>)
 8003162:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003164:	2000      	movs	r0, #0
 8003166:	f7fe fc71 	bl	8001a4c <HAL_InitTick>
  
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b004      	add	sp, #16
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40022000 	.word	0x40022000
 8003178:	40021000 	.word	0x40021000
 800317c:	00001388 	.word	0x00001388
 8003180:	fffff8ff 	.word	0xfffff8ff
 8003184:	08003c78 	.word	0x08003c78
 8003188:	20000000 	.word	0x20000000

0800318c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b08f      	sub	sp, #60	; 0x3c
 8003190:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003192:	2314      	movs	r3, #20
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <HAL_RCC_GetSysClockFreq+0xec>)
 8003198:	ca13      	ldmia	r2!, {r0, r1, r4}
 800319a:	c313      	stmia	r3!, {r0, r1, r4}
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	4a36      	ldr	r2, [pc, #216]	; (800327c <HAL_RCC_GetSysClockFreq+0xf0>)
 80031a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031a6:	c313      	stmia	r3!, {r0, r1, r4}
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b0:	2300      	movs	r3, #0
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b4:	2300      	movs	r3, #0
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80031c0:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <HAL_RCC_GetSysClockFreq+0xf4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	220c      	movs	r2, #12
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d047      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0xd4>
 80031d0:	d849      	bhi.n	8003266 <HAL_RCC_GetSysClockFreq+0xda>
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d002      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x50>
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0x56>
 80031da:	e044      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031e0:	e044      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	220f      	movs	r2, #15
 80031e8:	4013      	ands	r3, r2
 80031ea:	2214      	movs	r2, #20
 80031ec:	18ba      	adds	r2, r7, r2
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_RCC_GetSysClockFreq+0xf4>)
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	220f      	movs	r2, #15
 80031f8:	4013      	ands	r3, r2
 80031fa:	1d3a      	adds	r2, r7, #4
 80031fc:	5cd3      	ldrb	r3, [r2, r3]
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003202:	23c0      	movs	r3, #192	; 0xc0
 8003204:	025b      	lsls	r3, r3, #9
 8003206:	401a      	ands	r2, r3
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	025b      	lsls	r3, r3, #9
 800320c:	429a      	cmp	r2, r3
 800320e:	d109      	bne.n	8003224 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003212:	481c      	ldr	r0, [pc, #112]	; (8003284 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003214:	f7fc ff78 	bl	8000108 <__udivsi3>
 8003218:	0003      	movs	r3, r0
 800321a:	001a      	movs	r2, r3
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	4353      	muls	r3, r2
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
 8003222:	e01a      	b.n	800325a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003226:	23c0      	movs	r3, #192	; 0xc0
 8003228:	025b      	lsls	r3, r3, #9
 800322a:	401a      	ands	r2, r3
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	429a      	cmp	r2, r3
 8003232:	d109      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003236:	4814      	ldr	r0, [pc, #80]	; (8003288 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003238:	f7fc ff66 	bl	8000108 <__udivsi3>
 800323c:	0003      	movs	r3, r0
 800323e:	001a      	movs	r2, r3
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	4353      	muls	r3, r2
 8003244:	637b      	str	r3, [r7, #52]	; 0x34
 8003246:	e008      	b.n	800325a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800324a:	480e      	ldr	r0, [pc, #56]	; (8003284 <HAL_RCC_GetSysClockFreq+0xf8>)
 800324c:	f7fc ff5c 	bl	8000108 <__udivsi3>
 8003250:	0003      	movs	r3, r0
 8003252:	001a      	movs	r2, r3
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	4353      	muls	r3, r2
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800325e:	e005      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003264:	e002      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003268:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800326a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b00f      	add	sp, #60	; 0x3c
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	08003c18 	.word	0x08003c18
 800327c:	08003c28 	.word	0x08003c28
 8003280:	40021000 	.word	0x40021000
 8003284:	007a1200 	.word	0x007a1200
 8003288:	02dc6c00 	.word	0x02dc6c00

0800328c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e042      	b.n	8003324 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	223d      	movs	r2, #61	; 0x3d
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	223c      	movs	r2, #60	; 0x3c
 80032ae:	2100      	movs	r1, #0
 80032b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7fe fb29 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	223d      	movs	r2, #61	; 0x3d
 80032be:	2102      	movs	r1, #2
 80032c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	0019      	movs	r1, r3
 80032cc:	0010      	movs	r0, r2
 80032ce:	f000 f9e5 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2246      	movs	r2, #70	; 0x46
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	223e      	movs	r2, #62	; 0x3e
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	223f      	movs	r2, #63	; 0x3f
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2241      	movs	r2, #65	; 0x41
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2242      	movs	r2, #66	; 0x42
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2243      	movs	r2, #67	; 0x43
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2244      	movs	r2, #68	; 0x44
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2245      	movs	r2, #69	; 0x45
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223d      	movs	r2, #61	; 0x3d
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e042      	b.n	80033c4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	223d      	movs	r2, #61	; 0x3d
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223c      	movs	r2, #60	; 0x3c
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0018      	movs	r0, r3
 8003356:	f000 f839 	bl	80033cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	223d      	movs	r2, #61	; 0x3d
 800335e:	2102      	movs	r1, #2
 8003360:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	0019      	movs	r1, r3
 800336c:	0010      	movs	r0, r2
 800336e:	f000 f995 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2246      	movs	r2, #70	; 0x46
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	223e      	movs	r2, #62	; 0x3e
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	223f      	movs	r2, #63	; 0x3f
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2241      	movs	r2, #65	; 0x41
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2242      	movs	r2, #66	; 0x42
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2243      	movs	r2, #67	; 0x43
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2244      	movs	r2, #68	; 0x44
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2245      	movs	r2, #69	; 0x45
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223d      	movs	r2, #61	; 0x3d
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	223c      	movs	r2, #60	; 0x3c
 80033ec:	5c9b      	ldrb	r3, [r3, r2]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e082      	b.n	80034fc <HAL_TIM_IC_ConfigChannel+0x120>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	223c      	movs	r2, #60	; 0x3c
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11b      	bne.n	800343c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f000 f9b8 	bl	8003788 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	210c      	movs	r1, #12
 8003424:	438a      	bics	r2, r1
 8003426:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6999      	ldr	r1, [r3, #24]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	e05a      	b.n	80034f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d11c      	bne.n	800347c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f000 fa1d 	bl	8003890 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4928      	ldr	r1, [pc, #160]	; (8003504 <HAL_TIM_IC_ConfigChannel+0x128>)
 8003462:	400a      	ands	r2, r1
 8003464:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6999      	ldr	r1, [r3, #24]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	021a      	lsls	r2, r3, #8
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	619a      	str	r2, [r3, #24]
 800347a:	e03a      	b.n	80034f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11b      	bne.n	80034ba <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 fa71 	bl	8003978 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	210c      	movs	r1, #12
 80034a2:	438a      	bics	r2, r1
 80034a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69d9      	ldr	r1, [r3, #28]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	61da      	str	r2, [r3, #28]
 80034b8:	e01b      	b.n	80034f2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f000 fa95 	bl	80039f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	490a      	ldr	r1, [pc, #40]	; (8003504 <HAL_TIM_IC_ConfigChannel+0x128>)
 80034da:	400a      	ands	r2, r1
 80034dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	021a      	lsls	r2, r3, #8
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	223c      	movs	r2, #60	; 0x3c
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	fffff3ff 	.word	0xfffff3ff

08003508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223c      	movs	r2, #60	; 0x3c
 8003516:	5c9b      	ldrb	r3, [r3, r2]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIM_ConfigClockSource+0x18>
 800351c:	2302      	movs	r3, #2
 800351e:	e0b7      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x188>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	223c      	movs	r2, #60	; 0x3c
 8003524:	2101      	movs	r1, #1
 8003526:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	223d      	movs	r2, #61	; 0x3d
 800352c:	2102      	movs	r1, #2
 800352e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2277      	movs	r2, #119	; 0x77
 800353c:	4393      	bics	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a55      	ldr	r2, [pc, #340]	; (8003698 <HAL_TIM_ConfigClockSource+0x190>)
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	0192      	lsls	r2, r2, #6
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_TIM_ConfigClockSource+0xd6>
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	0192      	lsls	r2, r2, #6
 8003560:	4293      	cmp	r3, r2
 8003562:	d900      	bls.n	8003566 <HAL_TIM_ConfigClockSource+0x5e>
 8003564:	e088      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	0152      	lsls	r2, r2, #5
 800356a:	4293      	cmp	r3, r2
 800356c:	d100      	bne.n	8003570 <HAL_TIM_ConfigClockSource+0x68>
 800356e:	e085      	b.n	800367c <HAL_TIM_ConfigClockSource+0x174>
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	0152      	lsls	r2, r2, #5
 8003574:	4293      	cmp	r3, r2
 8003576:	d900      	bls.n	800357a <HAL_TIM_ConfigClockSource+0x72>
 8003578:	e07e      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 800357a:	2b70      	cmp	r3, #112	; 0x70
 800357c:	d018      	beq.n	80035b0 <HAL_TIM_ConfigClockSource+0xa8>
 800357e:	d900      	bls.n	8003582 <HAL_TIM_ConfigClockSource+0x7a>
 8003580:	e07a      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003582:	2b60      	cmp	r3, #96	; 0x60
 8003584:	d04f      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x11e>
 8003586:	d900      	bls.n	800358a <HAL_TIM_ConfigClockSource+0x82>
 8003588:	e076      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 800358a:	2b50      	cmp	r3, #80	; 0x50
 800358c:	d03b      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0xfe>
 800358e:	d900      	bls.n	8003592 <HAL_TIM_ConfigClockSource+0x8a>
 8003590:	e072      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d057      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x13e>
 8003596:	d900      	bls.n	800359a <HAL_TIM_ConfigClockSource+0x92>
 8003598:	e06e      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 800359a:	2b30      	cmp	r3, #48	; 0x30
 800359c:	d063      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
 800359e:	d86b      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d060      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
 80035a4:	d868      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d05d      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d05b      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035ae:	e063      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6899      	ldr	r1, [r3, #8]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f000 fa7a 	bl	8003ab8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2277      	movs	r2, #119	; 0x77
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]
      break;
 80035dc:	e04f      	b.n	800367e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f000 fa63 	bl	8003ab8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	01c9      	lsls	r1, r1, #7
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
      break;
 8003604:	e03b      	b.n	800367e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	001a      	movs	r2, r3
 8003614:	f000 f90e 	bl	8003834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2150      	movs	r1, #80	; 0x50
 800361e:	0018      	movs	r0, r3
 8003620:	f000 fa30 	bl	8003a84 <TIM_ITRx_SetConfig>
      break;
 8003624:	e02b      	b.n	800367e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	001a      	movs	r2, r3
 8003634:	f000 f96e 	bl	8003914 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2160      	movs	r1, #96	; 0x60
 800363e:	0018      	movs	r0, r3
 8003640:	f000 fa20 	bl	8003a84 <TIM_ITRx_SetConfig>
      break;
 8003644:	e01b      	b.n	800367e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	001a      	movs	r2, r3
 8003654:	f000 f8ee 	bl	8003834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	0018      	movs	r0, r3
 8003660:	f000 fa10 	bl	8003a84 <TIM_ITRx_SetConfig>
      break;
 8003664:	e00b      	b.n	800367e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0019      	movs	r1, r3
 8003670:	0010      	movs	r0, r2
 8003672:	f000 fa07 	bl	8003a84 <TIM_ITRx_SetConfig>
        break;
 8003676:	e002      	b.n	800367e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	e000      	b.n	800367e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800367c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	223d      	movs	r2, #61	; 0x3d
 8003682:	2101      	movs	r1, #1
 8003684:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	223c      	movs	r2, #60	; 0x3c
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b004      	add	sp, #16
 8003696:	bd80      	pop	{r7, pc}
 8003698:	ffff00ff 	.word	0xffff00ff

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a30      	ldr	r2, [pc, #192]	; (8003770 <TIM_Base_SetConfig+0xd4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d008      	beq.n	80036c6 <TIM_Base_SetConfig+0x2a>
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	05db      	lsls	r3, r3, #23
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x2a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <TIM_Base_SetConfig+0xd8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d108      	bne.n	80036d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2270      	movs	r2, #112	; 0x70
 80036ca:	4393      	bics	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <TIM_Base_SetConfig+0xd4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d014      	beq.n	800370a <TIM_Base_SetConfig+0x6e>
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	05db      	lsls	r3, r3, #23
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d00f      	beq.n	800370a <TIM_Base_SetConfig+0x6e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a21      	ldr	r2, [pc, #132]	; (8003774 <TIM_Base_SetConfig+0xd8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00b      	beq.n	800370a <TIM_Base_SetConfig+0x6e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a20      	ldr	r2, [pc, #128]	; (8003778 <TIM_Base_SetConfig+0xdc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_Base_SetConfig+0x6e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <TIM_Base_SetConfig+0xe0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0x6e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <TIM_Base_SetConfig+0xe4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <TIM_Base_SetConfig+0xe8>)
 800370e:	4013      	ands	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	4393      	bics	r3, r2
 8003722:	001a      	movs	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <TIM_Base_SetConfig+0xd4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <TIM_Base_SetConfig+0xbe>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0b      	ldr	r2, [pc, #44]	; (800377c <TIM_Base_SetConfig+0xe0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_Base_SetConfig+0xbe>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <TIM_Base_SetConfig+0xe4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d103      	bne.n	8003762 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	615a      	str	r2, [r3, #20]
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b004      	add	sp, #16
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40002000 	.word	0x40002000
 800377c:	40014400 	.word	0x40014400
 8003780:	40014800 	.word	0x40014800
 8003784:	fffffcff 	.word	0xfffffcff

08003788 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	2201      	movs	r2, #1
 800379c:	4393      	bics	r3, r2
 800379e:	001a      	movs	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <TIM_TI1_SetConfig+0xa4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d008      	beq.n	80037ca <TIM_TI1_SetConfig+0x42>
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	05db      	lsls	r3, r3, #23
 80037be:	429a      	cmp	r2, r3
 80037c0:	d003      	beq.n	80037ca <TIM_TI1_SetConfig+0x42>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <TIM_TI1_SetConfig+0xa8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <TIM_TI1_SetConfig+0x46>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <TIM_TI1_SetConfig+0x48>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2203      	movs	r2, #3
 80037d8:	4393      	bics	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e003      	b.n	80037ee <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2201      	movs	r2, #1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	22f0      	movs	r2, #240	; 0xf0
 80037f2:	4393      	bics	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	22ff      	movs	r2, #255	; 0xff
 80037fc:	4013      	ands	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	220a      	movs	r2, #10
 8003808:	4393      	bics	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	220a      	movs	r2, #10
 8003810:	4013      	ands	r3, r2
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	621a      	str	r2, [r3, #32]
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b006      	add	sp, #24
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400

08003834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	2201      	movs	r2, #1
 800384c:	4393      	bics	r3, r2
 800384e:	001a      	movs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	22f0      	movs	r2, #240	; 0xf0
 800385e:	4393      	bics	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	220a      	movs	r2, #10
 8003870:	4393      	bics	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	621a      	str	r2, [r3, #32]
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b006      	add	sp, #24
 800388e:	bd80      	pop	{r7, pc}

08003890 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	2210      	movs	r2, #16
 80038a4:	4393      	bics	r3, r2
 80038a6:	001a      	movs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <TIM_TI2_SetConfig+0x7c>)
 80038bc:	4013      	ands	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4a10      	ldr	r2, [pc, #64]	; (8003910 <TIM_TI2_SetConfig+0x80>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	031b      	lsls	r3, r3, #12
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	22a0      	movs	r2, #160	; 0xa0
 80038e4:	4393      	bics	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	22a0      	movs	r2, #160	; 0xa0
 80038ee:	4013      	ands	r3, r2
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b006      	add	sp, #24
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	fffffcff 	.word	0xfffffcff
 8003910:	ffff0fff 	.word	0xffff0fff

08003914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	2210      	movs	r2, #16
 8003926:	4393      	bics	r3, r2
 8003928:	001a      	movs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <TIM_TI2_ConfigInputStage+0x60>)
 800393e:	4013      	ands	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	031b      	lsls	r3, r3, #12
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	22a0      	movs	r2, #160	; 0xa0
 8003950:	4393      	bics	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b006      	add	sp, #24
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	ffff0fff 	.word	0xffff0fff

08003978 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <TIM_TI3_SetConfig+0x78>)
 800398c:	401a      	ands	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2203      	movs	r2, #3
 80039a2:	4393      	bics	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	22f0      	movs	r2, #240	; 0xf0
 80039b2:	4393      	bics	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	22ff      	movs	r2, #255	; 0xff
 80039bc:	4013      	ands	r3, r2
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <TIM_TI3_SetConfig+0x7c>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	23a0      	movs	r3, #160	; 0xa0
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	4013      	ands	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b006      	add	sp, #24
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	fffffeff 	.word	0xfffffeff
 80039f4:	fffff5ff 	.word	0xfffff5ff

080039f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <TIM_TI4_SetConfig+0x7c>)
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <TIM_TI4_SetConfig+0x80>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <TIM_TI4_SetConfig+0x84>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	031b      	lsls	r3, r3, #12
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <TIM_TI4_SetConfig+0x88>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	031a      	lsls	r2, r3, #12
 8003a52:	23a0      	movs	r3, #160	; 0xa0
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	4013      	ands	r3, r2
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b006      	add	sp, #24
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	ffffefff 	.word	0xffffefff
 8003a78:	fffffcff 	.word	0xfffffcff
 8003a7c:	ffff0fff 	.word	0xffff0fff
 8003a80:	ffff5fff 	.word	0xffff5fff

08003a84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2270      	movs	r2, #112	; 0x70
 8003a98:	4393      	bics	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	2207      	movs	r2, #7
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	609a      	str	r2, [r3, #8]
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b004      	add	sp, #16
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <TIM_ETR_SetConfig+0x3c>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	021a      	lsls	r2, r3, #8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b006      	add	sp, #24
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	ffff00ff 	.word	0xffff00ff

08003af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	223c      	movs	r2, #60	; 0x3c
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e042      	b.n	8003b96 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	223c      	movs	r2, #60	; 0x3c
 8003b14:	2101      	movs	r1, #1
 8003b16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	223d      	movs	r2, #61	; 0x3d
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2270      	movs	r2, #112	; 0x70
 8003b34:	4393      	bics	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00a      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0f      	ldr	r2, [pc, #60]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	4393      	bics	r3, r2
 8003b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	223d      	movs	r2, #61	; 0x3d
 8003b88:	2101      	movs	r1, #1
 8003b8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	223c      	movs	r2, #60	; 0x3c
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	0018      	movs	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40000400 	.word	0x40000400

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	2600      	movs	r6, #0
 8003bac:	4d0c      	ldr	r5, [pc, #48]	; (8003be0 <__libc_init_array+0x38>)
 8003bae:	4c0d      	ldr	r4, [pc, #52]	; (8003be4 <__libc_init_array+0x3c>)
 8003bb0:	1b64      	subs	r4, r4, r5
 8003bb2:	10a4      	asrs	r4, r4, #2
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	2600      	movs	r6, #0
 8003bba:	f000 f821 	bl	8003c00 <_init>
 8003bbe:	4d0a      	ldr	r5, [pc, #40]	; (8003be8 <__libc_init_array+0x40>)
 8003bc0:	4c0a      	ldr	r4, [pc, #40]	; (8003bec <__libc_init_array+0x44>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	00b3      	lsls	r3, r6, #2
 8003bce:	58eb      	ldr	r3, [r5, r3]
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	00b3      	lsls	r3, r6, #2
 8003bd8:	58eb      	ldr	r3, [r5, r3]
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08003c88 	.word	0x08003c88
 8003be4:	08003c88 	.word	0x08003c88
 8003be8:	08003c88 	.word	0x08003c88
 8003bec:	08003c8c 	.word	0x08003c8c

08003bf0 <memset>:
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	1882      	adds	r2, r0, r2
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d100      	bne.n	8003bfa <memset+0xa>
 8003bf8:	4770      	bx	lr
 8003bfa:	7019      	strb	r1, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	e7f9      	b.n	8003bf4 <memset+0x4>

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
